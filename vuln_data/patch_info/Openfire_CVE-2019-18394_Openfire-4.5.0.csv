Fix_Path,Fix_Src
"xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java:[120,141]:doGet","    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        final String host = request.getParameter(""host"");

        // Validate that we're connected to the host
        final SessionManager sessionManager = SessionManager.getInstance();
        final Optional<String> optionalHost = Stream
            .concat(sessionManager.getIncomingServers().stream(), sessionManager.getOutgoingServers().stream())
            .filter(remoteServerHost -> remoteServerHost.equalsIgnoreCase(host))
            .findAny();
        if (!optionalHost.isPresent()) {
            LOGGER.info(""Request to unconnected host {} ignored - using default response"", host);
            writeBytesToStream(defaultBytes, response);
            return;
        }

        // Check special cases where we need to change host to get a favicon
        final String hostToUse = ""gmail.com"".equals(host) ? ""google.com"" : host;
        byte[] bytes = getImage(hostToUse, defaultBytes);
        if (bytes != null) {
            writeBytesToStream(bytes, response);
        }
    }
"
"xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java:[120,141]:doGet","    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        final String host = request.getParameter(""host"");

        // Validate that we're connected to the host
        final SessionManager sessionManager = SessionManager.getInstance();
        final Optional<String> optionalHost = Stream
            .concat(sessionManager.getIncomingServers().stream(), sessionManager.getOutgoingServers().stream())
            .filter(remoteServerHost -> remoteServerHost.equalsIgnoreCase(host))
            .findAny();
        if (!optionalHost.isPresent()) {
            LOGGER.info(""Request to unconnected host {} ignored - using default response"", host);
            writeBytesToStream(defaultBytes, response);
            return;
        }

        // Check special cases where we need to change host to get a favicon
        final String hostToUse = ""gmail.com"".equals(host) ? ""google.com"" : host;
        byte[] bytes = getImage(hostToUse, defaultBytes);
        if (bytes != null) {
            writeBytesToStream(bytes, response);
        }
    }
"
"xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java:[198,225]:getImage","    private byte[] getImage(String url) {
        // Try to get the favicon from the url using an HTTP connection from the pool
        // that also allows to configure timeout values (e.g. connect and get data)
        final RequestConfig requestConfig = RequestConfig.custom()
            .setConnectTimeout(5000)
            .setSocketTimeout(5000)
            .build();
        final HttpUriRequest getRequest = RequestBuilder.get(url)
            .setConfig(requestConfig)
            .build();

        try(final CloseableHttpResponse response = client.execute(getRequest)) {
            if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                final byte[] result = EntityUtils.toByteArray(response.getEntity());

                // Prevent SSRF by checking result (OF-1885)
                if ( !GraphicsUtils.isImage( result ) ) {
                    LOGGER.info( ""Ignoring response to an HTTP request that should have returned an image (but returned something else): {}"", url) ;
                    return null;
                }
                return result;
            }
        } catch (final IOException ex) {
            LOGGER.debug( ""An exception occurred while trying to obtain an image from: {}"", url, ex );
        }

        return null;
    }
"
