Fix_Path,Fix_Src
"plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java:[66,189]:FederationAuthenticationEntryPoint","public class FederationAuthenticationEntryPoint implements AuthenticationEntryPoint,
    InitializingBean, ApplicationContextAware {
    
    /**
     * The key used to save the context of the request
     */
    public static final String SAVED_CONTEXT = ""SAVED_CONTEXT"";
    
    private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationEntryPoint.class);
    
    private ApplicationContext appContext;
    private FederationConfig federationConfig;
    //private String servletContext;

    public FederationConfig getFederationConfig() {
        return federationConfig;
    }

    public void setFederationConfig(FederationConfig federationConfig) {
        this.federationConfig = federationConfig;
    }

    public void afterPropertiesSet() throws Exception {
        Assert.notNull(this.appContext, ""ApplicationContext cannot be null."");
        Assert.notNull(this.federationConfig, ""FederationConfig cannot be null."");
    }

    private String getMetadataURI(FedizContext fedConfig) {
        if (fedConfig.getProtocol().getMetadataURI() != null) {
            return fedConfig.getProtocol().getMetadataURI();
        } else if (fedConfig.getProtocol() instanceof FederationProtocol) {
            return FederationConstants.METADATA_PATH_URI;
        } else if (fedConfig.getProtocol() instanceof SAMLProtocol) {
            return SAMLSSOConstants.FEDIZ_SAML_METADATA_PATH_URI;
        }
        
        return FederationConstants.METADATA_PATH_URI;
    }

    /**
     * Template method for you to do your own pre-processing before the redirect occurs.
     *
     * @param request the HttpServletRequest
     * @param response the HttpServletResponse
     */
    protected void preCommence(final HttpServletRequest request, final HttpServletResponse response) {

    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.appContext = applicationContext;
    }

    @Override
    public void commence(ServletRequest request, ServletResponse response,
                         AuthenticationException authException) throws IOException, ServletException {
        
        HttpServletRequest hrequest = (HttpServletRequest)request;
        HttpServletResponse hresponse = (HttpServletResponse)response;
        FedizContext fedContext = federationConfig.getFedizContext();
        LOG.debug(""Federation context: {}"", fedContext);
        
        if (hrequest.getRequestURL().indexOf(FederationConstants.METADATA_PATH_URI) != -1
            || hrequest.getRequestURL().indexOf(getMetadataURI(fedContext)) != -1) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Metadata document requested"");
            }
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            try {
                Document metadata = wfProc.getMetaData(hrequest, fedContext);
                out.write(DOM2Writer.nodeToString(metadata));
                return;
            } catch (Exception ex) {
                LOG.warn(""Failed to get metadata document: "" + ex.getMessage());
                hresponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                return;
            }            
        }
        
        String redirectUrl = null;
        try {
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            
            RedirectionResponse redirectionResponse =
                wfProc.createSignInRequest(hrequest, fedContext);
            redirectUrl = redirectionResponse.getRedirectionURL();
            
            if (redirectUrl == null) {
                LOG.warn(""Failed to create SignInRequest."");
                hresponse.sendError(
                        HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ""Failed to create SignInRequest."");
            }
            
            Map<String, String> headers = redirectionResponse.getHeaders();
            if (!headers.isEmpty()) {
                for (Entry<String, String> entry : headers.entrySet()) {
                    hresponse.addHeader(entry.getKey(), entry.getValue());
                }
            }
            
            HttpSession session = ((HttpServletRequest)request).getSession(true);
            session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());
        } catch (ProcessingException ex) {
            System.err.println(""Failed to create SignInRequest: "" + ex.getMessage());
            LOG.warn(""Failed to create SignInRequest: "" + ex.getMessage());
            hresponse.sendError(
                               HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ""Failed to create SignInRequest."");
        }
        
        preCommence(hrequest, hresponse);
        if (LOG.isInfoEnabled()) {
            LOG.info(""Redirecting to IDP: "" + redirectUrl);
        }
        hresponse.sendRedirect(redirectUrl);
        
    }

}
"
"plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java:[121,187]:commence","    public void commence(ServletRequest request, ServletResponse response,
                         AuthenticationException authException) throws IOException, ServletException {
        
        HttpServletRequest hrequest = (HttpServletRequest)request;
        HttpServletResponse hresponse = (HttpServletResponse)response;
        FedizContext fedContext = federationConfig.getFedizContext();
        LOG.debug(""Federation context: {}"", fedContext);
        
        if (hrequest.getRequestURL().indexOf(FederationConstants.METADATA_PATH_URI) != -1
            || hrequest.getRequestURL().indexOf(getMetadataURI(fedContext)) != -1) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Metadata document requested"");
            }
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            try {
                Document metadata = wfProc.getMetaData(hrequest, fedContext);
                out.write(DOM2Writer.nodeToString(metadata));
                return;
            } catch (Exception ex) {
                LOG.warn(""Failed to get metadata document: "" + ex.getMessage());
                hresponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                return;
            }            
        }
        
        String redirectUrl = null;
        try {
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            
            RedirectionResponse redirectionResponse =
                wfProc.createSignInRequest(hrequest, fedContext);
            redirectUrl = redirectionResponse.getRedirectionURL();
            
            if (redirectUrl == null) {
                LOG.warn(""Failed to create SignInRequest."");
                hresponse.sendError(
                        HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ""Failed to create SignInRequest."");
            }
            
            Map<String, String> headers = redirectionResponse.getHeaders();
            if (!headers.isEmpty()) {
                for (Entry<String, String> entry : headers.entrySet()) {
                    hresponse.addHeader(entry.getKey(), entry.getValue());
                }
            }
            
            HttpSession session = ((HttpServletRequest)request).getSession(true);
            session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());
        } catch (ProcessingException ex) {
            System.err.println(""Failed to create SignInRequest: "" + ex.getMessage());
            LOG.warn(""Failed to create SignInRequest: "" + ex.getMessage());
            hresponse.sendError(
                               HttpServletResponse.SC_INTERNAL_SERVER_ERROR, ""Failed to create SignInRequest."");
        }
        
        preCommence(hrequest, hresponse);
        if (LOG.isInfoEnabled()) {
            LOG.info(""Redirecting to IDP: "" + redirectUrl);
        }
        hresponse.sendRedirect(redirectUrl);
        
    }
"
"plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java:[62,64]:FederationAuthenticationFilter","    public FederationAuthenticationFilter() {
        super();
    }
"
"plugins/spring2/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java:[108,133]:attemptAuthentication","    public Authentication attemptAuthentication(HttpServletRequest request) throws AuthenticationException {
        
        if (isTokenExpired()) {
            throw new ExpiredTokenException(""Token is expired"");
        }
        
        verifySavedState(request);
        
        String wa = request.getParameter(FederationConstants.PARAM_ACTION);
        String responseToken = getResponseToken(request);
        FedizRequest wfReq = new FedizRequest();
        wfReq.setAction(wa);
        wfReq.setResponseToken(responseToken);
        wfReq.setState(getState(request));
        wfReq.setRequest(request);
        
        X509Certificate certs[] = 
            (X509Certificate[])request.getAttribute(""javax.servlet.request.X509Certificate"");
        wfReq.setCerts(certs);
        
        final UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(null, wfReq);

        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));

        return this.getAuthenticationManager().authenticate(authRequest);
    }
"
"plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java:[64,178]:FederationAuthenticationEntryPoint","public class FederationAuthenticationEntryPoint implements AuthenticationEntryPoint,
    InitializingBean, ApplicationContextAware {
    
    /**
     * The key used to save the context of the request
     */
    public static final String SAVED_CONTEXT = ""SAVED_CONTEXT"";
    
    private static final Logger LOG = LoggerFactory.getLogger(FederationAuthenticationEntryPoint.class);
    
    private ApplicationContext appContext;
    private FederationConfig federationConfig;

    public FederationConfig getFederationConfig() {
        return federationConfig;
    }

    public void setFederationConfig(FederationConfig federationConfig) {
        this.federationConfig = federationConfig;
    }

    public void afterPropertiesSet() throws Exception {
        Assert.notNull(this.appContext, ""ApplicationContext cannot be null."");
        Assert.notNull(this.federationConfig, ""FederationConfig cannot be null."");
    }

    public final void commence(final HttpServletRequest servletRequest, final HttpServletResponse response,
            final AuthenticationException authenticationException) throws IOException, ServletException {

        FedizContext fedContext = federationConfig.getFedizContext();
        LOG.debug(""Federation context: {}"", fedContext);
        
        if (servletRequest.getRequestURL().indexOf(FederationConstants.METADATA_PATH_URI) != -1
            || servletRequest.getRequestURL().indexOf(getMetadataURI(fedContext)) != -1) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Metadata document requested"");
            }
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            try {
                Document metadata = wfProc.getMetaData(servletRequest, fedContext);
                out.write(DOM2Writer.nodeToString(metadata));
                return;
            } catch (Exception ex) {
                LOG.warn(""Failed to get metadata document: "" + ex.getMessage());
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                return;
            }            
        }
        
        String redirectUrl = null;
        try {
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            RedirectionResponse redirectionResponse =
                wfProc.createSignInRequest(servletRequest, fedContext);
            redirectUrl = redirectionResponse.getRedirectionURL();
            
            if (redirectUrl == null) {
                LOG.warn(""Failed to create SignInRequest. Redirect URL null"");
                throw new ServletException(""Failed to create SignInRequest. Redirect URL null"");
            }
            
            Map<String, String> headers = redirectionResponse.getHeaders();
            if (!headers.isEmpty()) {
                for (Entry<String, String> entry : headers.entrySet()) {
                    response.addHeader(entry.getKey(), entry.getValue());
                }
            }
            
            HttpSession session = servletRequest.getSession(true);
            session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());
        } catch (ProcessingException ex) {
            LOG.warn(""Failed to create SignInRequest"", ex);
            throw new ServletException(""Failed to create SignInRequest: "" + ex.getMessage());
        }
        
        preCommence(servletRequest, response);
        if (LOG.isInfoEnabled()) {
            LOG.info(""Redirecting to IDP: "" + redirectUrl);
        }
        response.sendRedirect(redirectUrl);
    }

    private String getMetadataURI(FedizContext fedConfig) {
        if (fedConfig.getProtocol().getMetadataURI() != null) {
            return fedConfig.getProtocol().getMetadataURI();
        } else if (fedConfig.getProtocol() instanceof FederationProtocol) {
            return FederationConstants.METADATA_PATH_URI;
        } else if (fedConfig.getProtocol() instanceof SAMLProtocol) {
            return SAMLSSOConstants.FEDIZ_SAML_METADATA_PATH_URI;
        }
        
        return FederationConstants.METADATA_PATH_URI;
    }

    /**
     * Template method for you to do your own pre-processing before the redirect occurs.
     *
     * @param request the HttpServletRequest
     * @param response the HttpServletResponse
     */
    protected void preCommence(final HttpServletRequest request, final HttpServletResponse response) {

    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.appContext = applicationContext;
    }

}
"
"plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationEntryPoint.java:[90,149]:commence","    public final void commence(final HttpServletRequest servletRequest, final HttpServletResponse response,
            final AuthenticationException authenticationException) throws IOException, ServletException {

        FedizContext fedContext = federationConfig.getFedizContext();
        LOG.debug(""Federation context: {}"", fedContext);
        
        if (servletRequest.getRequestURL().indexOf(FederationConstants.METADATA_PATH_URI) != -1
            || servletRequest.getRequestURL().indexOf(getMetadataURI(fedContext)) != -1) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Metadata document requested"");
            }
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            try {
                Document metadata = wfProc.getMetaData(servletRequest, fedContext);
                out.write(DOM2Writer.nodeToString(metadata));
                return;
            } catch (Exception ex) {
                LOG.warn(""Failed to get metadata document: "" + ex.getMessage());
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                return;
            }            
        }
        
        String redirectUrl = null;
        try {
            FedizProcessor wfProc = 
                FedizProcessorFactory.newFedizProcessor(fedContext.getProtocol());
            RedirectionResponse redirectionResponse =
                wfProc.createSignInRequest(servletRequest, fedContext);
            redirectUrl = redirectionResponse.getRedirectionURL();
            
            if (redirectUrl == null) {
                LOG.warn(""Failed to create SignInRequest. Redirect URL null"");
                throw new ServletException(""Failed to create SignInRequest. Redirect URL null"");
            }
            
            Map<String, String> headers = redirectionResponse.getHeaders();
            if (!headers.isEmpty()) {
                for (Entry<String, String> entry : headers.entrySet()) {
                    response.addHeader(entry.getKey(), entry.getValue());
                }
            }
            
            HttpSession session = servletRequest.getSession(true);
            session.setAttribute(SAVED_CONTEXT, redirectionResponse.getRequestState().getState());
        } catch (ProcessingException ex) {
            LOG.warn(""Failed to create SignInRequest"", ex);
            throw new ServletException(""Failed to create SignInRequest: "" + ex.getMessage());
        }
        
        preCommence(servletRequest, response);
        if (LOG.isInfoEnabled()) {
            LOG.info(""Redirecting to IDP: "" + redirectUrl);
        }
        response.sendRedirect(redirectUrl);
    }
"
"plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java:[51,54]:FederationAuthenticationFilter","    public FederationAuthenticationFilter() {
        super(""/j_spring_fediz_security_check"");
        setAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler());
    }
"
"plugins/spring/src/main/java/org/apache/cxf/fediz/spring/web/FederationAuthenticationFilter.java:[57,84]:attemptAuthentication","    public Authentication attemptAuthentication(final HttpServletRequest request, final HttpServletResponse response)
        throws AuthenticationException, IOException {

        if (isTokenExpired()) {
            throw new ExpiredTokenException(""Token is expired"");
        }
        
        verifySavedState(request);
        
        String wa = request.getParameter(FederationConstants.PARAM_ACTION);
        String responseToken = getResponseToken(request);
        
        FedizRequest wfReq = new FedizRequest();
        wfReq.setAction(wa);
        wfReq.setResponseToken(responseToken);
        wfReq.setState(getState(request));
        wfReq.setRequest(request);
        
        X509Certificate certs[] = 
            (X509Certificate[])request.getAttribute(""javax.servlet.request.X509Certificate"");
        wfReq.setCerts(certs);
        
        final UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(null, wfReq);

        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));

        return this.getAuthenticationManager().authenticate(authRequest);
    }
"
