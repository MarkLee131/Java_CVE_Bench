Fix_Path,Fix_Src
"jbpm-console-ng-human-tasks/jbpm-console-ng-human-tasks-client/src/main/java/org/jbpm/console/ng/ht/client/editors/taskdetailsmulti/TaskDetailsMultiPresenter.java:[56,288]:TaskDetailsMultiPresenter","public class TaskDetailsMultiPresenter {

    private Constants constants = GWT.create(Constants.class);
    @Inject
    private ActivityManager activityManager;
    @Inject
    private PlaceManager placeManager;
    
    private long selectedTaskId = 0;
    
    private String selectedTaskName = """";

    public interface TaskDetailsMultiView extends UberView<TaskDetailsMultiPresenter> {

        void displayNotification(String text);

        Heading getTaskIdAndName();

        HTMLPanel getContent();
    }
    @Inject
    Identity identity;
    @Inject
    public TaskDetailsMultiView view;
    private Menus menus;
    private PlaceRequest place;
    private Map<String, AbstractWorkbenchScreenActivity> activitiesMap = new HashMap<String, AbstractWorkbenchScreenActivity>(4);

    public TaskDetailsMultiPresenter() {
        makeMenuBar();
    }

    @WorkbenchPartView
    public UberView<TaskDetailsMultiPresenter> getView() {
        return view;
    }

    @DefaultPosition
    public Position getPosition(){
        return Position.EAST;
    }
    
    
    @OnStartup
    public void onStartup(final PlaceRequest place) {
        this.place = place;
    }

    @WorkbenchPartTitle
    public String getTitle() {
        return constants.Details();
    }

    @OnOpen
    public void onOpen() {
        WorkbenchSplitLayoutPanel splitPanel = (WorkbenchSplitLayoutPanel)view.asWidget().getParent().getParent().getParent().getParent()
                                            .getParent().getParent().getParent().getParent().getParent().getParent().getParent();
        splitPanel.setWidgetMinSize(splitPanel.getWidget(0), 500);
        
    }
    
    public void onTaskSelectionEvent(@Observes TaskSelectionEvent event){
        selectedTaskId = event.getTaskId();
        selectedTaskName = event.getTaskName();
        
        view.getTaskIdAndName().setText(SafeHtmlUtils.htmlEscape(String.valueOf(selectedTaskId) + "" - ""+selectedTaskName));
        
        view.getContent().clear();
        
        String placeToGo;
        if(event.getPlace() != null && !event.getPlace().equals("""")){
            placeToGo = event.getPlace();
        }else{
            placeToGo = ""Task Details"";
        }
        
        

        DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);
        //Set Parameters here: 
        defaultPlaceRequest.addParameter(""taskId"", String.valueOf(selectedTaskId));
        defaultPlaceRequest.addParameter(""taskName"", selectedTaskName);

        Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);
        AbstractWorkbenchScreenActivity activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());
        
        activitiesMap.put(placeToGo, activity);
        
        IsWidget widget = activity.getWidget();
        activity.launch(place, null);
        activity.onStartup(defaultPlaceRequest);
        view.getContent().add(widget);
        activity.onOpen();
    }

    @WorkbenchMenu
    public Menus getMenus() {
        return menus;
    }

    private void makeMenuBar() {
        menus = MenuFactory
                .newTopLevelMenu(constants.Work())
                .respondsWith(new Command() {
            @Override
            public void execute() {
                view.getContent().clear();
                String placeToGo = ""Form Display"";

                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);
                //Set Parameters here: 

                defaultPlaceRequest.addParameter(""taskId"", String.valueOf(selectedTaskId));
                defaultPlaceRequest.addParameter(""taskName"", selectedTaskName);
                AbstractWorkbenchScreenActivity activity = null;
                if(activitiesMap.get(placeToGo) == null){
                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);
                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());
                    
                }else{
                    activity = activitiesMap.get(placeToGo);
                }
                IsWidget widget = activity.getWidget();
                    
                activity.launch(place, null);
                activity.onStartup(defaultPlaceRequest);
                view.getContent().add(widget);
                activity.onOpen();

            }
        })
                .endMenu()
                .newTopLevelMenu(constants.Details())
                .respondsWith(new Command() {
            @Override
            public void execute() {
                view.getContent().clear();
                String placeToGo = ""Task Details"";

                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);
                //Set Parameters here: 
                defaultPlaceRequest.addParameter(""taskId"", String.valueOf(selectedTaskId));
                defaultPlaceRequest.addParameter(""taskName"", selectedTaskName);

                AbstractWorkbenchScreenActivity activity = null;
                if(activitiesMap.get(placeToGo) == null){
                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);
                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());
                    
                }else{
                    activity = activitiesMap.get(placeToGo);
                }
                IsWidget widget = activity.getWidget();
                activity.launch(place, null);
                activity.onStartup(defaultPlaceRequest);
                view.getContent().add(widget);
                activity.onOpen();

            }
        })
                .endMenu()
                .newTopLevelMenu(constants.Assignments())
                .respondsWith(new Command() {
            @Override
            public void execute() {
                view.getContent().clear();
                String placeToGo = ""Task Assignments"";

                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);
                //Set Parameters here: 
                defaultPlaceRequest.addParameter(""taskId"", String.valueOf(selectedTaskId));
                defaultPlaceRequest.addParameter(""taskName"", selectedTaskName);

                AbstractWorkbenchScreenActivity activity = null;
                if(activitiesMap.get(placeToGo) == null){
                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);
                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());
                    
                }else{
                    activity = activitiesMap.get(placeToGo);
                }
                IsWidget widget = activity.getWidget();
                activity.launch(place, null);
                activity.onStartup(defaultPlaceRequest);
                view.getContent().add(widget);
                activity.onOpen();

            }
        })
                .endMenu()
                .newTopLevelMenu(constants.Comments())
                .respondsWith(new Command() {
            @Override
            public void execute() {
                view.getContent().clear();
                String placeToGo = ""Task Comments"";

                DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);
                //Set Parameters here: 
                defaultPlaceRequest.addParameter(""taskId"", String.valueOf(selectedTaskId));
                defaultPlaceRequest.addParameter(""taskName"", selectedTaskName);

                AbstractWorkbenchScreenActivity activity = null;
                if(activitiesMap.get(placeToGo) == null){
                    Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);
                    activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());
                    
                }else{
                    activity = activitiesMap.get(placeToGo);
                }
                IsWidget widget = activity.getWidget();
                activity.launch(place, null);
                activity.onStartup(defaultPlaceRequest);
                view.getContent().add(widget);
                activity.onOpen();



            }
        })
                .endMenu()
                .build();

    }
    
    @OnClose
    public void onClose(){
        for(String activityId : activitiesMap.keySet()){
            activitiesMap.get(activityId).onClose();
        }
        activitiesMap.clear();
    }
}
"
"jbpm-console-ng-human-tasks/jbpm-console-ng-human-tasks-client/src/main/java/org/jbpm/console/ng/ht/client/editors/taskdetailsmulti/TaskDetailsMultiPresenter.java:[117,149]:onTaskSelectionEvent","    public void onTaskSelectionEvent(@Observes TaskSelectionEvent event){
        selectedTaskId = event.getTaskId();
        selectedTaskName = event.getTaskName();
        
        view.getTaskIdAndName().setText(SafeHtmlUtils.htmlEscape(String.valueOf(selectedTaskId) + "" - ""+selectedTaskName));
        
        view.getContent().clear();
        
        String placeToGo;
        if(event.getPlace() != null && !event.getPlace().equals("""")){
            placeToGo = event.getPlace();
        }else{
            placeToGo = ""Task Details"";
        }
        
        

        DefaultPlaceRequest defaultPlaceRequest = new DefaultPlaceRequest(placeToGo);
        //Set Parameters here: 
        defaultPlaceRequest.addParameter(""taskId"", String.valueOf(selectedTaskId));
        defaultPlaceRequest.addParameter(""taskName"", selectedTaskName);

        Set<Activity> activities = activityManager.getActivities(defaultPlaceRequest);
        AbstractWorkbenchScreenActivity activity = ((AbstractWorkbenchScreenActivity) activities.iterator().next());
        
        activitiesMap.put(placeToGo, activity);
        
        IsWidget widget = activity.getWidget();
        activity.launch(place, null);
        activity.onStartup(defaultPlaceRequest);
        view.getContent().add(widget);
        activity.onOpen();
    }
"
