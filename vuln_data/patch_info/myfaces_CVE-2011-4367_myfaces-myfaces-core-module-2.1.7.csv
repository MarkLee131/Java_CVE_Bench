Fix_Path,Fix_Src
"shared/src/main/java/org/apache/myfaces/shared/resource/ResourceValidationUtils.java:[21,199]:ResourceValidationUtils","public class ResourceValidationUtils
{
    public static boolean isValidResourceName(String resourceName)
    {
        return validateResourceName(resourceName, true);
    }
    
    public static boolean isValidLibraryName(String libraryName)
    {
        return validate(libraryName, false);
    }
    
    public static boolean isValidLibraryName(String libraryName, boolean allowSlash)
    {
        return validate(libraryName, allowSlash);
    }
    
    public static boolean isValidLocalePrefix(String localePrefix)
    {
        for (int i = 0; i < localePrefix.length(); i++)
        {
            char c = localePrefix.charAt(i);
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || (c >='0' && c <='9') )
            {
                continue;
            }
            else
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validate(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 c == '-' || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/')
                 )
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validateResourceName(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            
            // Forbidden chars by win
            // < (less than)
            // > (greater than)
            // : (colon)
            // "" (double quote)
            // / (forward slash)
            // \ (backslash)
            // | (vertical bar or pipe)
            // ? (question mark)
            // * (asterisk)
            // Do not use chars in UNIX because they have special meaning
            // *&%$|^/\~
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 (c == '-') || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/') ||
                 (c == '!') || (c == '#') || (c == '\'') || (c == '(') || (c == ')') ||
                 (c == '+') || (c == ',') || (c == ';' ) || (c == '=') || 
                 (c == '@') || (c == '[') || (c == ']' ) || (c == '{') || (c == '}'))
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
}
"
"shared/src/main/java/org/apache/myfaces/shared/resource/ResourceValidationUtils.java:[21,199]:ResourceValidationUtils","public class ResourceValidationUtils
{
    public static boolean isValidResourceName(String resourceName)
    {
        return validateResourceName(resourceName, true);
    }
    
    public static boolean isValidLibraryName(String libraryName)
    {
        return validate(libraryName, false);
    }
    
    public static boolean isValidLibraryName(String libraryName, boolean allowSlash)
    {
        return validate(libraryName, allowSlash);
    }
    
    public static boolean isValidLocalePrefix(String localePrefix)
    {
        for (int i = 0; i < localePrefix.length(); i++)
        {
            char c = localePrefix.charAt(i);
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || (c >='0' && c <='9') )
            {
                continue;
            }
            else
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validate(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 c == '-' || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/')
                 )
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validateResourceName(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            
            // Forbidden chars by win
            // < (less than)
            // > (greater than)
            // : (colon)
            // "" (double quote)
            // / (forward slash)
            // \ (backslash)
            // | (vertical bar or pipe)
            // ? (question mark)
            // * (asterisk)
            // Do not use chars in UNIX because they have special meaning
            // *&%$|^/\~
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 (c == '-') || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/') ||
                 (c == '!') || (c == '#') || (c == '\'') || (c == '(') || (c == ')') ||
                 (c == '+') || (c == ',') || (c == ';' ) || (c == '=') || 
                 (c == '@') || (c == '[') || (c == ']' ) || (c == '{') || (c == '}'))
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
}
"
"shared/src/main/java/org/apache/myfaces/shared/resource/ResourceValidationUtils.java:[23,26]:isValidResourceName","    public static boolean isValidResourceName(String resourceName)
    {
        return validateResourceName(resourceName, true);
    }
"
"shared/src/main/java/org/apache/myfaces/shared/resource/ResourceValidationUtils.java:[21,199]:ResourceValidationUtils","public class ResourceValidationUtils
{
    public static boolean isValidResourceName(String resourceName)
    {
        return validateResourceName(resourceName, true);
    }
    
    public static boolean isValidLibraryName(String libraryName)
    {
        return validate(libraryName, false);
    }
    
    public static boolean isValidLibraryName(String libraryName, boolean allowSlash)
    {
        return validate(libraryName, allowSlash);
    }
    
    public static boolean isValidLocalePrefix(String localePrefix)
    {
        for (int i = 0; i < localePrefix.length(); i++)
        {
            char c = localePrefix.charAt(i);
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || (c >='0' && c <='9') )
            {
                continue;
            }
            else
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validate(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 c == '-' || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/')
                 )
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validateResourceName(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            
            // Forbidden chars by win
            // < (less than)
            // > (greater than)
            // : (colon)
            // "" (double quote)
            // / (forward slash)
            // \ (backslash)
            // | (vertical bar or pipe)
            // ? (question mark)
            // * (asterisk)
            // Do not use chars in UNIX because they have special meaning
            // *&%$|^/\~
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 (c == '-') || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/') ||
                 (c == '!') || (c == '#') || (c == '\'') || (c == '(') || (c == ')') ||
                 (c == '+') || (c == ',') || (c == ';' ) || (c == '=') || 
                 (c == '@') || (c == '[') || (c == ']' ) || (c == '{') || (c == '}'))
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
}
"
"shared/src/main/java/org/apache/myfaces/shared/resource/ResourceValidationUtils.java:[55,118]:validate","    private static boolean validate(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 c == '-' || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/')
                 )
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
"
"shared/src/main/java/org/apache/myfaces/shared/resource/ResourceValidationUtils.java:[21,199]:ResourceValidationUtils","public class ResourceValidationUtils
{
    public static boolean isValidResourceName(String resourceName)
    {
        return validateResourceName(resourceName, true);
    }
    
    public static boolean isValidLibraryName(String libraryName)
    {
        return validate(libraryName, false);
    }
    
    public static boolean isValidLibraryName(String libraryName, boolean allowSlash)
    {
        return validate(libraryName, allowSlash);
    }
    
    public static boolean isValidLocalePrefix(String localePrefix)
    {
        for (int i = 0; i < localePrefix.length(); i++)
        {
            char c = localePrefix.charAt(i);
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || (c >='0' && c <='9') )
            {
                continue;
            }
            else
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validate(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 c == '-' || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/')
                 )
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
    
    private static boolean validateResourceName(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            
            // Forbidden chars by win
            // < (less than)
            // > (greater than)
            // : (colon)
            // "" (double quote)
            // / (forward slash)
            // \ (backslash)
            // | (vertical bar or pipe)
            // ? (question mark)
            // * (asterisk)
            // Do not use chars in UNIX because they have special meaning
            // *&%$|^/\~
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 (c == '-') || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/') ||
                 (c == '!') || (c == '#') || (c == '\'') || (c == '(') || (c == ')') ||
                 (c == '+') || (c == ',') || (c == ';' ) || (c == '=') || 
                 (c == '@') || (c == '[') || (c == ']' ) || (c == '{') || (c == '}'))
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
}
"
"shared/src/main/java/org/apache/myfaces/shared/resource/ResourceValidationUtils.java:[55,118]:validate","    private static boolean validate(String expression, boolean allowSlash)
    {
        if (expression.length() == 2 && 
            expression.charAt(0) == '.' &&
            expression.charAt(1) == '.')
        {
            return false;
        }
        for (int i = 0; i < expression.length(); i++)
        {
            char c = expression.charAt(i);

            // Enforce NameChar convention as specified
            // http://www.w3.org/TR/REC-xml/#NT-NameChar
            // Valid characters for NameChar
            // "":"" | [A-Z] | ""_"" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | 
            // [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | 
            // [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] 
            // | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
            // ""-"" | ""."" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
            // Excluding "":"" 
            if ( (c >='A' && c <='Z') || c == '_' || (c >='a' && c <='z') || 
                 (c >=0xC0 && c <=0xD6) || (c >=0xD8 && c <=0xF6) || 
                 (c >=0xF8 && c <=0x2FF) || (c >=0x370 && c <=0x37D) || 
                 (c >=0x37F && c <=0x1FFF) || (c >=0x200C && c <=0x200D) ||
                 (c >=0x2070 && c <=0x218F) || (c >=0x2C00 && c <=0x2FEF) || 
                 (c >=0x3001 && c <=0xD7FF) || (c >=0xF900 && c <=0xFDCF) ||
                 (c >=0xFDF0 && c <=0xFFFD) || (c >=0x10000 && c <=0xEFFFF) ||
                 c == '-' || (c >='0' && c <='9') || c == 0xB7 || (c >=0x300 && c <=0x36F) || 
                 (c >=0x203F && c <=0x2040) || (allowSlash && c == '/')
                 )
            {
                continue;
            }
            else if (c == '.')
            {
                if (i+2 < expression.length())
                {
                    char c1 = expression.charAt(i+1);
                    char c2 = expression.charAt(i+2);
                    if (c == c1 && (c2 == '/' || c2 == '\\' ) )
                    {
                        return false;
                    }
                }
                continue;
            }
            else
            {
                return false;
            }
        }
        if (expression.length() >= 3)
        {
            int length = expression.length();
            if ( (expression.charAt(length-3) == '/' || expression.charAt(length-3) == '\\' ) && 
                  expression.charAt(length-2) == '.' &&
                  expression.charAt(length-1) == '.' )
            {
                return false;
            }
        }
        return true;
    }
"
"shared/src/test/java/org/apache/myfaces/shared/resource/ResourceValidationUtilsTest.java:[25,98]:ResourceValidationUtilsTest","public class ResourceValidationUtilsTest extends AbstractJsfTestCase
{
    @Test
    public void testLocaleNames() throws Exception
    {
        Assert.assertTrue(ResourceValidationUtils.isValidLocalePrefix(""es_CO""));
        Assert.assertTrue(ResourceValidationUtils.isValidLocalePrefix(""de""));
        Assert.assertTrue(ResourceValidationUtils.isValidLocalePrefix(""de_AT""));
        Assert.assertTrue(ResourceValidationUtils.isValidLocalePrefix(""zh_CN_id""));
        Assert.assertTrue(ResourceValidationUtils.isValidLocalePrefix(""zh_CN_23""));
        
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""de-AT""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix("".""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""..""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""zh_""+'\t'+""CN""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""\\..""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""/..""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""../""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""..\\""));
        Assert.assertFalse(ResourceValidationUtils.isValidLocalePrefix(""..""));
    }
    
    @Test
    public void testLibraryNames() throws Exception
    {
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""mylib""));
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""org.apache.myfaces""));
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""some-js-lib""));
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""some_js_lib""));
        
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""components/panels"", true));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""components/panels"", false));

        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""/mylib""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""mylib""+'\t'+""22""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""\\mylib""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""..""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName("".."", true));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""some:js""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""some?js""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""some&js""));
    }

    @Test
    public void testResourceNames() throws Exception
    {
        Assert.assertTrue(ResourceValidationUtils.isValidResourceName(""myres""));
        Assert.assertTrue(ResourceValidationUtils.isValidResourceName(""myres.css""));
        Assert.assertTrue(ResourceValidationUtils.isValidResourceName(""/myres""));
        Assert.assertTrue(ResourceValidationUtils.isValidResourceName(""/mydir/./myres.css""));
        Assert.assertTrue(ResourceValidationUtils.isValidResourceName(""org.apache.myfaces""));
        Assert.assertTrue(ResourceValidationUtils.isValidResourceName(""my_res_file.css""));
        Assert.assertTrue(ResourceValidationUtils.isValidResourceName(""my-res-file.css""));
        
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""myres""+'\t'+""22""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""\\myres""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""..""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""../""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""/..""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""\\..""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""..\\""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""myres.css/..""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""myres.css\\..""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""../myres.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""..\\myres.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""my/../res.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""my\\../res.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""my/..\\res.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""/mydir/../myres.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""my_res:file.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""my_res?file.css""));
        Assert.assertFalse(ResourceValidationUtils.isValidResourceName(""my_res&file.css""));
    }
}
"
"shared/src/test/java/org/apache/myfaces/shared/resource/ResourceValidationUtilsTest.java:[48,66]:testLibraryNames","    public void testLibraryNames() throws Exception
    {
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""mylib""));
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""org.apache.myfaces""));
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""some-js-lib""));
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""some_js_lib""));
        
        Assert.assertTrue(ResourceValidationUtils.isValidLibraryName(""components/panels"", true));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""components/panels"", false));

        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""/mylib""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""mylib""+'\t'+""22""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""\\mylib""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""..""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName("".."", true));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""some:js""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""some?js""));
        Assert.assertFalse(ResourceValidationUtils.isValidLibraryName(""some&js""));
    }
"
"impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java:[84,87]:createResource","    public Resource createResource(String resourceName)
    {
        return createResource(resourceName, null);
    }
"
"impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java:[478,530]:getLocalePrefixForLocateResource","    protected String getLocalePrefixForLocateResource()
    {
        String localePrefix = null;
        FacesContext context = FacesContext.getCurrentInstance();
        boolean isResourceRequest = context.getApplication().getResourceHandler().isResourceRequest(context);

        if (isResourceRequest)
        {
            localePrefix = context.getExternalContext().getRequestParameterMap().get(""loc"");
            
            if (localePrefix != null)
            {
                if (!ResourceValidationUtils.isValidLocalePrefix(localePrefix))
                {
                    return null;
                }
                return localePrefix;
            }
        }
        
        String bundleName = context.getApplication().getMessageBundle();

        if (null != bundleName)
        {
            Locale locale = null;
            
            if (isResourceRequest || context.getViewRoot() == null)
            {
                locale = context.getApplication().getViewHandler()
                                .calculateLocale(context);
            }
            else
            {
                locale = context.getViewRoot().getLocale();
            }

            try
            {
                ResourceBundle bundle = ResourceBundle
                        .getBundle(bundleName, locale, ClassUtils.getContextClassLoader());

                if (bundle != null)
                {
                    localePrefix = bundle.getString(ResourceHandler.LOCALE_PREFIX);
                }
            }
            catch (MissingResourceException e)
            {
                // Ignore it and return null
            }
        }
        return localePrefix;
    }
"
"impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java:[560,598]:libraryExists","    public boolean libraryExists(String libraryName)
    {
        String localePrefix = getLocalePrefixForLocateResource();

        String pathToLib = null;
        
        if (libraryName != null && !ResourceValidationUtils.isValidLibraryName(
                libraryName, isAllowSlashesLibraryName()))
        {
            return false;
        }
        
        if (localePrefix != null)
        {
            //Check with locale
            pathToLib = localePrefix + '/' + libraryName;
            
            for (ResourceLoader loader : getResourceHandlerSupport()
                    .getResourceLoaders())
            {
                if (loader.libraryExists(pathToLib))
                {
                    return true;
                }
            }            
        }

        //Check without locale
        for (ResourceLoader loader : getResourceHandlerSupport()
                .getResourceLoaders())
        {
            if (loader.libraryExists(libraryName))
            {
                return true;
            }
        }

        return false;
    }
"
"impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java:[84,87]:createResource","    public Resource createResource(String resourceName)
    {
        return createResource(resourceName, null);
    }
"
"impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java:[560,598]:libraryExists","    public boolean libraryExists(String libraryName)
    {
        String localePrefix = getLocalePrefixForLocateResource();

        String pathToLib = null;
        
        if (libraryName != null && !ResourceValidationUtils.isValidLibraryName(
                libraryName, isAllowSlashesLibraryName()))
        {
            return false;
        }
        
        if (localePrefix != null)
        {
            //Check with locale
            pathToLib = localePrefix + '/' + libraryName;
            
            for (ResourceLoader loader : getResourceHandlerSupport()
                    .getResourceLoaders())
            {
                if (loader.libraryExists(pathToLib))
                {
                    return true;
                }
            }            
        }

        //Check without locale
        for (ResourceLoader loader : getResourceHandlerSupport()
                .getResourceLoaders())
        {
            if (loader.libraryExists(libraryName))
            {
                return true;
            }
        }

        return false;
    }
"
