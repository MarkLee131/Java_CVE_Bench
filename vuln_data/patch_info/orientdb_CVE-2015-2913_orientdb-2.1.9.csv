Fix_Path,Fix_Src
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[139,141]:getInstance","  public static OHttpSessionManager getInstance() {
    return instance;
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[46,57]:OHttpSessionManager","  protected OHttpSessionManager() {
    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;

    Orient.instance().scheduleTask(new TimerTask() {
      @Override
      public void run() {
        final int expired = checkSessionsValidity();
        if (expired > 0)
          OLogManager.instance().debug(this, ""Removed %d session because expired"", expired);
      }
    }, expirationTime, expirationTime);
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[59,82]:checkSessionsValidity","  public int checkSessionsValidity() {
    int expired = 0;

    acquireExclusiveLock();
    try {
      final long now = System.currentTimeMillis();

      Entry<String, OHttpSession> s;
      for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {
        s = it.next();

        if (now - s.getValue().getUpdatedOn() > expirationTime) {
          // REMOVE THE SESSION
          it.remove();
          expired++;
        }
      }

    } finally {
      releaseExclusiveLock();
    }

    return expired;
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[84,93]:getSessions","  public OHttpSession[] getSessions() {
    acquireSharedLock();
    try {

      return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);

    } finally {
      releaseSharedLock();
    }
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[95,107]:getSession","  public OHttpSession getSession(final String iId) {
    acquireSharedLock();
    try {

      final OHttpSession sess = sessions.get(iId);
      if (sess != null)
        sess.updateLastUpdatedOn();
      return sess;

    } finally {
      releaseSharedLock();
    }
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[109,119]:createSession","  public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {
    acquireExclusiveLock();
    try {
      final String id = ""OS"" + System.currentTimeMillis() + random.nextLong();
      sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));
      return id;

    } finally {
      releaseExclusiveLock();
    }
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[121,129]:removeSession","  public OHttpSession removeSession(final String iSessionId) {
    acquireExclusiveLock();
    try {
      return sessions.remove(iSessionId);

    } finally {
      releaseExclusiveLock();
    }
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[131,133]:getExpirationTime","  public int getExpirationTime() {
    return expirationTime;
  }
"
"server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java:[135,137]:setExpirationTime","  public void setExpirationTime(int expirationTime) {
    this.expirationTime = expirationTime;
  }
"
