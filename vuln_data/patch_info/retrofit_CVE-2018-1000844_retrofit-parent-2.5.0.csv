Fix_Path,Fix_Src
"retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java:[33,40]:JaxbResponseConverter","  JaxbResponseConverter(JAXBContext context, Class<T> type) {
    this.context = context;
    this.type = type;

    // Prevent XML External Entity attacks (XXE).
    xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
  }
"
"retrofit-converters/jaxb/src/test/java/retrofit2/converter/jaxb/JaxbConverterFactoryTest.java:[36,200]:JaxbConverterFactoryTest","public final class JaxbConverterFactoryTest {
  static final Contact SAMPLE_CONTACT = new Contact(""Jenny"",
      Collections.singletonList(new PhoneNumber(""867-5309"", Type.MOBILE)));

  static final String SAMPLE_CONTACT_XML = """"
      + ""<?xml version=\""1.0\"" ?>""
      + ""<contact>""
      + ""<name>Jenny</name>""
      + ""<phone_number type=\""MOBILE\"">""
      + ""<number>867-5309</number>""
      + ""</phone_number>""
      + ""</contact>"";

  interface Service {
    @POST(""/"") Call<Void> postXml(@Body Contact contact);
    @GET(""/"") Call<Contact> getXml();
  }

  @Rule public final MockWebServer server = new MockWebServer();

  private Service service;

  @Before public void setUp() {
    JaxbConverterFactory factory = JaxbConverterFactory.create();
    Retrofit retrofit = new Retrofit.Builder()
        .baseUrl(server.url(""/""))
        .addConverterFactory(factory)
        .build();
    service = retrofit.create(Service.class);
  }

  @Test public void xmlRequestBody() throws Exception {
    server.enqueue(new MockResponse());

    Call<Void> call = service.postXml(SAMPLE_CONTACT);
    call.execute();

    RecordedRequest request = server.takeRequest();
    assertThat(request.getHeader(""Content-Type"")).isEqualTo(""application/xml; charset=utf-8"");
    assertThat(request.getBody().readUtf8()).isEqualTo(SAMPLE_CONTACT_XML);
  }

  @Test public void xmlResponseBody() throws Exception {
    server.enqueue(new MockResponse()
        .setBody(SAMPLE_CONTACT_XML));

    Call<Contact> call = service.getXml();
    Response<Contact> response = call.execute();
    assertThat(response.body()).isEqualTo(SAMPLE_CONTACT);
  }

  @Test public void characterEncoding() throws Exception {
    server.enqueue(new MockResponse()
        .setBody(""""
            + ""<?xml version=\""1.0\"" ?>""
            + ""<contact>""
            + ""<name>ÐÑÐ¾Ð½ÑÐ¾Ð·Ð°Ð²Ñ \uD83E\uDD95 ãã£ã©ããµã¦ã«ã¹ã»ã¬ãã¯ã¹ &#129430;</name>""
            + ""</contact>""));

    Call<Contact> call = service.getXml();
    Response<Contact> response = call.execute();
    assertThat(response.body().name)
        .isEqualTo(""ÐÑÐ¾Ð½ÑÐ¾Ð·Ð°Ð²Ñ \uD83E\uDD95 ãã£ã©ããµã¦ã«ã¹ã»ã¬ãã¯ã¹ \uD83E\uDD96"");
  }

  @Test public void userSuppliedJaxbContext() throws Exception {
    JAXBContext context = JAXBContext.newInstance(Contact.class);
    JaxbConverterFactory factory = JaxbConverterFactory.create(context);
    Retrofit retrofit = new Retrofit.Builder()
        .baseUrl(server.url(""/""))
        .addConverterFactory(factory)
        .build();
    service = retrofit.create(Service.class);

    server.enqueue(new MockResponse());

    Call<Void> call = service.postXml(SAMPLE_CONTACT);
    call.execute();

    RecordedRequest request = server.takeRequest();
    assertThat(request.getHeader(""Content-Type"")).isEqualTo(""application/xml; charset=utf-8"");
    assertThat(request.getBody().readUtf8()).isEqualTo(SAMPLE_CONTACT_XML);
  }

  @Test public void malformedXml() throws Exception {
    server.enqueue(new MockResponse()
        .setBody(""This is not XML""));

    Call<Contact> call = service.getXml();
    try {
      call.execute();
      fail();
    } catch (RuntimeException expected) {
      assertThat(expected).hasMessageContaining(""ParseError"");
    }
  }

  @Test public void unrecognizedField() throws Exception {
    server.enqueue(new MockResponse()
        .setBody(""""
            + ""<?xml version=\""1.0\"" ?>""
            + ""<contact>""
            + ""<name>Jenny</name>""
            + ""<age>21</age>""
            + ""<phone_number type=\""FAX\"">""
            + ""<number>867-5309</number>""
            + ""</phone_number>""
            + ""</contact>""));

    Call<Contact> call = service.getXml();
    Response<Contact> response = call.execute();
    assertThat(response.body().name).isEqualTo(""Jenny"");
  }

  @Test public void externalEntity() throws Exception {
    server.enqueue(new MockResponse()
        .setBody(""""
            + ""<?xml version=\""1.0\"" ?>""
            + ""<!DOCTYPE contact[""
            + ""  <!ENTITY secret SYSTEM \"""" + server.url(""/secret.txt"") + ""\"">""
            + ""]>""
            + ""<contact>""
            + ""<name>&secret;</name>""
            + ""</contact>""));
    server.enqueue(new MockResponse()
        .setBody(""hello""));

    Call<Contact> call = service.getXml();
    try {
      Response<Contact> response = call.execute();
      response.body();
      fail();
    } catch (RuntimeException expected) {
      assertThat(expected).hasMessageContaining(""ParseError"");
    }

    assertThat(server.getRequestCount()).isEqualTo(1);
  }

  @Test public void externalDtd() throws Exception {
    server.enqueue(new MockResponse()
        .setBody(""""
            + ""<?xml version=\""1.0\"" ?>""
            + ""<!DOCTYPE contact SYSTEM \"""" + server.url(""/contact.dtd"") + ""\"">""
            + ""<contact>""
            + ""<name>&secret;</name>""
            + ""</contact>""));
    server.enqueue(new MockResponse()
        .setBody(""""
            + ""<!ELEMENT contact (name)>\n""
            + ""<!ELEMENT name (#PCDATA)>\n""
            + ""<!ENTITY secret \""hello\"">""));

    Call<Contact> call = service.getXml();
    try {
      Response<Contact> response = call.execute();
      response.body();
      fail();
    } catch (RuntimeException expected) {
      assertThat(expected).hasMessageContaining(""ParseError"");
    }

    assertThat(server.getRequestCount()).isEqualTo(1);
  }
}
"
