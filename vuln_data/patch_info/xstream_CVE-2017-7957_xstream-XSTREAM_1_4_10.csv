Fix_Path,Fix_Src
"xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java:[25,105]:SecurityVulnerabilityTest","public class SecurityVulnerabilityTest extends AbstractAcceptanceTest {

    private final static StringBuffer BUFFER = new StringBuffer();

    protected void setUp() throws Exception {
        super.setUp();
        BUFFER.setLength(0);
        xstream.alias(""runnable"", Runnable.class);
        xstream.allowTypeHierarchy(Runnable.class);
        xstream.addPermission(ProxyTypePermission.PROXIES);
    }

    public void testCannotInjectEventHandler() {
        final String xml = """"
                + ""<string class='runnable-array'>\n""
                + ""  <dynamic-proxy>\n""
                + ""    <interface>java.lang.Runnable</interface>\n""
                + ""    <handler class='java.beans.EventHandler'>\n""
                + ""      <target class='com.thoughtworks.acceptance.SecurityVulnerabilityTest$Exec'/>\n""
                + ""      <action>exec</action>\n""
                + ""    </handler>\n""
                + ""  </dynamic-proxy>\n""
                + ""</string>"";

        try {
            xstream.fromXML(xml);
            fail(""Thrown "" + XStreamException.class.getName() + "" expected"");
        } catch (final XStreamException e) {
            assertTrue(e.getMessage().indexOf(EventHandler.class.getName()) > 0);
        }
        assertEquals(0, BUFFER.length());
    }

    public void testExplicitlyConvertEventHandler() {
        final String xml = """"
                + ""<string class='runnable-array'>\n""
                + ""  <dynamic-proxy>\n""
                + ""    <interface>java.lang.Runnable</interface>\n""
                + ""    <handler class='java.beans.EventHandler'>\n""
                + ""      <target class='com.thoughtworks.acceptance.SecurityVulnerabilityTest$Exec'/>\n""
                + ""      <action>exec</action>\n""
                + ""    </handler>\n""
                + ""  </dynamic-proxy>\n""
                + ""</string>"";

        xstream.allowTypes(new Class[]{EventHandler.class});
        xstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream
            .getReflectionProvider(), EventHandler.class));

        final Runnable[] array = (Runnable[])xstream.fromXML(xml);
        assertEquals(0, BUFFER.length());
        array[0].run();
        assertEquals(""Executed!"", BUFFER.toString());
    }

    public static class Exec {

        public void exec() {
            BUFFER.append(""Executed!"");
        }
    }

    public void testDeniedInstanceOfVoid() {
        try {
            xstream.fromXML(""<void/>"");
            fail(""Thrown "" + ForbiddenClassException.class.getName() + "" expected"");
        } catch (final ForbiddenClassException e) {
            // OK
        }
    }

    public void testAllowedInstanceOfVoid() {
        xstream.allowTypes(new Class[] { void.class, Void.class });
        try {
            xstream.fromXML(""<void/>"");
            fail(""Thrown "" + ConversionException.class.getName() + "" expected"");
        } catch (final ConversionException e) {
            assertEquals(""void"", e.get(""required-type""));
        }
    }
}
"
"xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java:[74,96]:newInstance","    public Object newInstance(Class type) {
        if (exception != null) {
            ObjectAccessException ex = new ObjectAccessException(""Cannot construct type"", exception);
            ex.add(""construction-type"", type.getName());
            throw ex;
        }
        ErrorWritingException ex = null;
        if (type == void.class || type == Void.class) {
            ex = new ConversionException(""Type void cannot have an instance"");
        } else {
            try {
                return unsafe.allocateInstance(type);
            } catch (final SecurityException e) {
                ex = new ObjectAccessException(""Cannot construct type"", e);
            } catch (final InstantiationException e) {
                ex = new ConversionException(""Cannot construct type"", e);
            } catch (final IllegalArgumentException e) {
                ex = new ObjectAccessException(""Cannot construct type"", e);
            }
        }
        ex.add(""construction-type"", type.getName());
        throw ex;
    }
"
"xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java:[24,27]:allows","    public boolean allows(Class type) {
        return type != null && type != void.class && type != Void.class && type.isPrimitive()
            || Primitives.isBoxed(type);
    }
"
