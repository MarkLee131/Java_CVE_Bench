Vul_Path,Vul_Src
"modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavaClientCodegen.java:[58,97]:JavaClientCodegen","    public JavaClientCodegen() {
        super();
        outputFolder = ""generated-code"" + File.separator + ""java"";
        embeddedTemplateDir = templateDir = ""Java"";
        invokerPackage = ""io.swagger.client"";
        artifactId = ""swagger-java-client"";
        apiPackage = ""io.swagger.client.api"";
        modelPackage = ""io.swagger.client.model"";

        cliOptions.add(CliOption.newBoolean(USE_RX_JAVA, ""Whether to use the RxJava adapter with the retrofit2 library.""));
        cliOptions.add(CliOption.newBoolean(USE_RX_JAVA2, ""Whether to use the RxJava2 adapter with the retrofit2 library.""));
        cliOptions.add(CliOption.newBoolean(PARCELABLE_MODEL, ""Whether to generate models for Android that implement Parcelable with the okhttp-gson library.""));
        cliOptions.add(CliOption.newBoolean(USE_PLAY_WS, ""Use Play! Async HTTP client (Play WS API)""));
        cliOptions.add(CliOption.newString(PLAY_VERSION, ""Version of Play! Framework (possible values \""play24\"", \""play25\"")""));
        cliOptions.add(CliOption.newBoolean(SUPPORT_JAVA6, ""Whether to support Java6 with the Jersey1 library.""));
        cliOptions.add(CliOption.newBoolean(USE_BEANVALIDATION, ""Use BeanValidation API annotations""));
        cliOptions.add(CliOption.newBoolean(PERFORM_BEANVALIDATION, ""Perform BeanValidation""));
        cliOptions.add(CliOption.newBoolean(USE_GZIP_FEATURE, ""Send gzip-encoded requests""));
        cliOptions.add(CliOption.newBoolean(USE_RUNTIME_EXCEPTION, ""Use RuntimeException instead of Exception""));

        supportedLibraries.put(""jersey1"", ""HTTP client: Jersey client 1.19.4. JSON processing: Jackson 2.10.1. Enable Java6 support using '-DsupportJava6=true'. Enable gzip request encoding using '-DuseGzipFeature=true'."");
        supportedLibraries.put(""feign"", ""HTTP client: OpenFeign 9.4.0. JSON processing: Jackson 2.10.1"");
        supportedLibraries.put(""jersey2"", ""HTTP client: Jersey client 2.29.1. JSON processing: Jackson 2.10.1"");
        supportedLibraries.put(""okhttp-gson"", ""HTTP client: OkHttp 2.7.5. JSON processing: Gson 2.8.1. Enable Parcelable models on Android using '-DparcelableModel=true'. Enable gzip request encoding using '-DuseGzipFeature=true'."");
        supportedLibraries.put(RETROFIT_1, ""HTTP client: OkHttp 2.7.5. JSON processing: Gson 2.3.1 (Retrofit 1.9.0). IMPORTANT NOTE: retrofit1.x is no longer actively maintained so please upgrade to 'retrofit2' instead."");
        supportedLibraries.put(RETROFIT_2, ""HTTP client: OkHttp 3.8.0. JSON processing: Gson 2.6.1 (Retrofit 2.3.0). Enable the RxJava adapter using '-DuseRxJava[2]=true'. (RxJava 1.x or 2.x)"");
        supportedLibraries.put(""resttemplate"", ""HTTP client: Spring RestTemplate 4.3.9-RELEASE. JSON processing: Jackson 2.10.1"");
        supportedLibraries.put(""resteasy"", ""HTTP client: Resteasy client 3.1.3.Final. JSON processing: Jackson 2.10.1"");
        supportedLibraries.put(""vertx"", ""HTTP client: VertX client 3.2.4. JSON processing: Jackson 2.10.1"");
        supportedLibraries.put(""google-api-client"", ""HTTP client: Google API client 1.23.0. JSON processing: Jackson 2.10.1"");
        supportedLibraries.put(""rest-assured"", ""HTTP client: rest-assured : 3.1.0. JSON processing: Gson 2.6.1. Only for Java8"");

        CliOption libraryOption = new CliOption(CodegenConstants.LIBRARY, ""library template (sub-template) to use"");
        libraryOption.setEnum(supportedLibraries);
        // set okhttp-gson as the default
        libraryOption.setDefault(""okhttp-gson"");
        cliOptions.add(libraryOption);
        setLibrary(""okhttp-gson"");

    }
"
"modules/swagger-codegen/src/test/java/io/swagger/codegen/options/JaxRSServerOptionsProvider.java:[57,99]:createOptions","    public Map<String, String> createOptions() {
        ImmutableMap.Builder<String, String> builder = new ImmutableMap.Builder<String, String>();
        builder.put(CodegenConstants.IMPL_FOLDER, IMPL_FOLDER_VALUE)
            .put(JavaClientCodegen.DATE_LIBRARY, ""joda"") //java.lang.IllegalArgumentException: Multiple entries with same key: dateLibrary=joda and dateLibrary=joda
            .put(JavaClientCodegen.SUPPORT_JAVA6, ""false"")
            .put(""title"", ""Test title"")
            .put(CodegenConstants.MODEL_PACKAGE, MODEL_PACKAGE_VALUE)
            .put(CodegenConstants.API_PACKAGE, API_PACKAGE_VALUE)
            .put(CodegenConstants.SORT_PARAMS_BY_REQUIRED_FLAG, SORT_PARAMS_VALUE)
            .put(CodegenConstants.ENSURE_UNIQUE_PARAMS, ENSURE_UNIQUE_PARAMS_VALUE)
            .put(CodegenConstants.INVOKER_PACKAGE, INVOKER_PACKAGE_VALUE)
            .put(CodegenConstants.GROUP_ID, GROUP_ID_VALUE)
            .put(CodegenConstants.ARTIFACT_ID, ARTIFACT_ID_VALUE)
            .put(CodegenConstants.ARTIFACT_VERSION, ARTIFACT_VERSION_VALUE)
            .put(CodegenConstants.ARTIFACT_URL, ARTIFACT_URL_VALUE)
            .put(CodegenConstants.ARTIFACT_DESCRIPTION, ARTIFACT_DESCRIPTION_VALUE)
            .put(CodegenConstants.SCM_CONNECTION, SCM_CONNECTION_VALUE)
            .put(CodegenConstants.SCM_DEVELOPER_CONNECTION, SCM_DEVELOPER_CONNECTION_VALUE)
            .put(CodegenConstants.SCM_URL, SCM_URL_VALUE)
            .put(CodegenConstants.DEVELOPER_NAME, DEVELOPER_NAME_VALUE)
            .put(CodegenConstants.DEVELOPER_EMAIL, DEVELOPER_EMAIL_VALUE)
            .put(CodegenConstants.DEVELOPER_ORGANIZATION, DEVELOPER_ORGANIZATION_VALUE)
            .put(CodegenConstants.DEVELOPER_ORGANIZATION_URL, DEVELOPER_ORGANIZATION_URL_VALUE)
            .put(CodegenConstants.LICENSE_NAME, LICENSE_NAME_VALUE)
            .put(CodegenConstants.LICENSE_URL, LICENSE_URL_VALUE)
            .put(CodegenConstants.SOURCE_FOLDER, SOURCE_FOLDER_VALUE)
            .put(CodegenConstants.LOCAL_VARIABLE_PREFIX, LOCAL_PREFIX_VALUE)
            .put(CodegenConstants.SERIALIZABLE_MODEL, SERIALIZABLE_MODEL_VALUE)
            .put(JavaClientCodegen.FULL_JAVA_UTIL, FULL_JAVA_UTIL_VALUE)
            .put(CodegenConstants.LIBRARY, JAXRS_DEFAULT_LIBRARY_VALUE)
            .put(CodegenConstants.SERIALIZE_BIG_DECIMAL_AS_STRING, ""true"")
            .put(JavaClientCodegen.JAVA8_MODE, JAVA8_MODE_VALUE)
            .put(JavaClientCodegen.WITH_XML, WITH_XML_VALUE)
            .put(""hideGenerationTimestamp"", ""true"")
            .put(JavaClientCodegen.DISABLE_HTML_ESCAPING, ""false"")
            .put(JavaCXFServerCodegen.USE_BEANVALIDATION, USE_BEANVALIDATION)
            .put(""serverPort"", ""2345"")
            .put(CodegenConstants.ALLOW_UNICODE_IDENTIFIERS, ALLOW_UNICODE_IDENTIFIERS_VALUE)
            .put(JavaJerseyServerCodegen.USE_TAGS, USE_TAGS)
            .put(JavaClientCodegen.CHECK_DUPLICATED_MODEL_NAME, ""false"");

        return builder.build();
    }
"
"modules/swagger-codegen/src/test/java/io/swagger/codegen/options/JavaClientOptionsProvider.java:[16,32]:createOptions","    public Map<String, String> createOptions() {
        Map<String, String> options = new HashMap<String, String>(super.createOptions());
        options.put(CodegenConstants.LIBRARY, DEFAULT_LIBRARY_VALUE);
        options.put(JavaClientCodegen.USE_RX_JAVA, ""false"");
        options.put(JavaClientCodegen.USE_RX_JAVA2, ""false"");
        options.put(JavaClientCodegen.USE_PLAY_WS, ""false"");
        options.put(JavaClientCodegen.PLAY_VERSION, JavaClientCodegen.PLAY_25);
        options.put(JavaClientCodegen.PARCELABLE_MODEL, ""false"");
        options.put(JavaClientCodegen.SUPPORT_JAVA6, ""false"");
        options.put(JavaClientCodegen.USE_BEANVALIDATION, ""false"");
        options.put(JavaClientCodegen.PERFORM_BEANVALIDATION, PERFORM_BEANVALIDATION);
        options.put(JavaClientCodegen.USE_GZIP_FEATURE, ""false"");
        options.put(JavaClientCodegen.USE_RUNTIME_EXCEPTION, ""false"");
        options.put(JavaClientCodegen.JAVA8_MODE, ""false"");
        options.put(JavaClientCodegen.NOT_NULL_JACKSON_ANNOTATION, ""false"");
        return options;
    }
"
"modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/AbstractJavaCodegen.java:[197,492]:processOpts","    public void processOpts() {
        super.processOpts();

        if (additionalProperties.containsKey(SUPPORT_JAVA6)) {
            this.setSupportJava6(Boolean.valueOf(additionalProperties.get(SUPPORT_JAVA6).toString()));
        }
        additionalProperties.put(SUPPORT_JAVA6, supportJava6);

        if (additionalProperties.containsKey(DISABLE_HTML_ESCAPING)) {
            this.setDisableHtmlEscaping(Boolean.valueOf(additionalProperties.get(DISABLE_HTML_ESCAPING).toString()));
        }
        additionalProperties.put(DISABLE_HTML_ESCAPING, disableHtmlEscaping);

        if (additionalProperties.containsKey(CodegenConstants.INVOKER_PACKAGE)) {
            this.setInvokerPackage((String) additionalProperties.get(CodegenConstants.INVOKER_PACKAGE));
        } else if (additionalProperties.containsKey(CodegenConstants.API_PACKAGE)) {
            // guess from api package
            String derviedInvokerPackage = deriveInvokerPackageName((String)additionalProperties.get(CodegenConstants.API_PACKAGE));
            this.additionalProperties.put(CodegenConstants.INVOKER_PACKAGE, derviedInvokerPackage);
            this.setInvokerPackage((String) additionalProperties.get(CodegenConstants.INVOKER_PACKAGE));
            LOGGER.info(""Invoker Package Name, originally not set, is now dervied from api package name: "" + derviedInvokerPackage);
        } else if (additionalProperties.containsKey(CodegenConstants.MODEL_PACKAGE)) {
            // guess from model package
            String derviedInvokerPackage = deriveInvokerPackageName((String)additionalProperties.get(CodegenConstants.MODEL_PACKAGE));
            this.additionalProperties.put(CodegenConstants.INVOKER_PACKAGE, derviedInvokerPackage);
            this.setInvokerPackage((String) additionalProperties.get(CodegenConstants.INVOKER_PACKAGE));
            LOGGER.info(""Invoker Package Name, originally not set, is now dervied from model package name: "" + derviedInvokerPackage);
        } else {
            //not set, use default to be passed to template
            additionalProperties.put(CodegenConstants.INVOKER_PACKAGE, invokerPackage);
        }

        if (!additionalProperties.containsKey(CodegenConstants.MODEL_PACKAGE)) {
            additionalProperties.put(CodegenConstants.MODEL_PACKAGE, modelPackage);
        }

        if (!additionalProperties.containsKey(CodegenConstants.API_PACKAGE)) {
            additionalProperties.put(CodegenConstants.API_PACKAGE, apiPackage);
        }

        if (additionalProperties.containsKey(CodegenConstants.GROUP_ID)) {
            this.setGroupId((String) additionalProperties.get(CodegenConstants.GROUP_ID));
        } else {
            //not set, use to be passed to template
            additionalProperties.put(CodegenConstants.GROUP_ID, groupId);
        }

        if (additionalProperties.containsKey(CodegenConstants.ARTIFACT_ID)) {
            this.setArtifactId((String) additionalProperties.get(CodegenConstants.ARTIFACT_ID));
        } else {
            //not set, use to be passed to template
            additionalProperties.put(CodegenConstants.ARTIFACT_ID, artifactId);
        }

        if (additionalProperties.containsKey(CodegenConstants.ARTIFACT_VERSION)) {
            this.setArtifactVersion((String) additionalProperties.get(CodegenConstants.ARTIFACT_VERSION));
        } else {
            //not set, use to be passed to template
            additionalProperties.put(CodegenConstants.ARTIFACT_VERSION, artifactVersion);
        }

        if (additionalProperties.containsKey(CodegenConstants.ARTIFACT_URL)) {
            this.setArtifactUrl((String) additionalProperties.get(CodegenConstants.ARTIFACT_URL));
        } else {
            additionalProperties.put(CodegenConstants.ARTIFACT_URL, artifactUrl);
        }

        if (additionalProperties.containsKey(CodegenConstants.ARTIFACT_DESCRIPTION)) {
            this.setArtifactDescription((String) additionalProperties.get(CodegenConstants.ARTIFACT_DESCRIPTION));
        } else {
            additionalProperties.put(CodegenConstants.ARTIFACT_DESCRIPTION, artifactDescription);
        }

        if (additionalProperties.containsKey(CodegenConstants.SCM_CONNECTION)) {
            this.setScmConnection((String) additionalProperties.get(CodegenConstants.SCM_CONNECTION));
        } else {
            additionalProperties.put(CodegenConstants.SCM_CONNECTION, scmConnection);
        }

        if (additionalProperties.containsKey(CodegenConstants.SCM_DEVELOPER_CONNECTION)) {
            this.setScmDeveloperConnection((String) additionalProperties.get(CodegenConstants.SCM_DEVELOPER_CONNECTION));
        } else {
            additionalProperties.put(CodegenConstants.SCM_DEVELOPER_CONNECTION, scmDeveloperConnection);
        }

        if (additionalProperties.containsKey(CodegenConstants.SCM_URL)) {
            this.setScmUrl((String) additionalProperties.get(CodegenConstants.SCM_URL));
        } else {
            additionalProperties.put(CodegenConstants.SCM_URL, scmUrl);
        }

        if (additionalProperties.containsKey(CodegenConstants.DEVELOPER_NAME)) {
            this.setDeveloperName((String) additionalProperties.get(CodegenConstants.DEVELOPER_NAME));
        } else {
            additionalProperties.put(CodegenConstants.DEVELOPER_NAME, developerName);
        }

        if (additionalProperties.containsKey(CodegenConstants.DEVELOPER_EMAIL)) {
            this.setDeveloperEmail((String) additionalProperties.get(CodegenConstants.DEVELOPER_EMAIL));
        } else {
            additionalProperties.put(CodegenConstants.DEVELOPER_EMAIL, developerEmail);
        }

        if (additionalProperties.containsKey(CodegenConstants.DEVELOPER_ORGANIZATION)) {
            this.setDeveloperOrganization((String) additionalProperties.get(CodegenConstants.DEVELOPER_ORGANIZATION));
        } else {
            additionalProperties.put(CodegenConstants.DEVELOPER_ORGANIZATION, developerOrganization);
        }

        if (additionalProperties.containsKey(CodegenConstants.DEVELOPER_ORGANIZATION_URL)) {
            this.setDeveloperOrganizationUrl((String) additionalProperties.get(CodegenConstants.DEVELOPER_ORGANIZATION_URL));
        } else {
            additionalProperties.put(CodegenConstants.DEVELOPER_ORGANIZATION_URL, developerOrganizationUrl);
        }

        if (additionalProperties.containsKey(CodegenConstants.LICENSE_NAME)) {
            this.setLicenseName((String) additionalProperties.get(CodegenConstants.LICENSE_NAME));
        } else {
            additionalProperties.put(CodegenConstants.LICENSE_NAME, licenseName);
        }

        if (additionalProperties.containsKey(CodegenConstants.LICENSE_URL)) {
            this.setLicenseUrl((String) additionalProperties.get(CodegenConstants.LICENSE_URL));
        } else {
            additionalProperties.put(CodegenConstants.LICENSE_URL, licenseUrl);
        }

        if (additionalProperties.containsKey(CodegenConstants.SOURCE_FOLDER)) {
            this.setSourceFolder((String) additionalProperties.get(CodegenConstants.SOURCE_FOLDER));
        }

        if (additionalProperties.containsKey(CodegenConstants.LOCAL_VARIABLE_PREFIX)) {
            this.setLocalVariablePrefix((String) additionalProperties.get(CodegenConstants.LOCAL_VARIABLE_PREFIX));
        }

        if (additionalProperties.containsKey(CodegenConstants.SERIALIZABLE_MODEL)) {
            this.setSerializableModel(Boolean.valueOf(additionalProperties.get(CodegenConstants.SERIALIZABLE_MODEL).toString()));
        }

        if (additionalProperties.containsKey(CodegenConstants.LIBRARY)) {
            this.setLibrary((String) additionalProperties.get(CodegenConstants.LIBRARY));
        }

        if(additionalProperties.containsKey(CodegenConstants.SERIALIZE_BIG_DECIMAL_AS_STRING)) {
            this.setSerializeBigDecimalAsString(Boolean.valueOf(additionalProperties.get(CodegenConstants.SERIALIZE_BIG_DECIMAL_AS_STRING).toString()));
        }

        // need to put back serializableModel (boolean) into additionalProperties as value in additionalProperties is string
        additionalProperties.put(CodegenConstants.SERIALIZABLE_MODEL, serializableModel);

        if (additionalProperties.containsKey(FULL_JAVA_UTIL)) {
            this.setFullJavaUtil(Boolean.valueOf(additionalProperties.get(FULL_JAVA_UTIL).toString()));
        }

        if (this instanceof NotNullAnnotationFeatures) {
            notNullOption = (NotNullAnnotationFeatures)this;
            if (additionalProperties.containsKey(NOT_NULL_JACKSON_ANNOTATION)) {
                notNullOption.setNotNullJacksonAnnotation(convertPropertyToBoolean(NOT_NULL_JACKSON_ANNOTATION));
                writePropertyBack(NOT_NULL_JACKSON_ANNOTATION, notNullOption.isNotNullJacksonAnnotation());
                if (notNullOption.isNotNullJacksonAnnotation()) {
                    importMapping.put(""JsonInclude"", ""com.fasterxml.jackson.annotation.JsonInclude"");
                }
            }
        }

        if (fullJavaUtil) {
            javaUtilPrefix = ""java.util."";
        }
        additionalProperties.put(FULL_JAVA_UTIL, fullJavaUtil);
        additionalProperties.put(""javaUtilPrefix"", javaUtilPrefix);

        if (additionalProperties.containsKey(WITH_XML)) {
            this.setWithXml(Boolean.valueOf(additionalProperties.get(WITH_XML).toString()));
        }
        additionalProperties.put(WITH_XML, withXml);

        if (additionalProperties.containsKey(ERROR_ON_UNKNOWN_ENUM)) {
            boolean errorOnUnknownEnum = Boolean.parseBoolean(additionalProperties.get(ERROR_ON_UNKNOWN_ENUM).toString());
            additionalProperties.put(ERROR_ON_UNKNOWN_ENUM, errorOnUnknownEnum);
        }

        // make api and model doc path available in mustache template
        additionalProperties.put(""apiDocPath"", apiDocPath);
        additionalProperties.put(""modelDocPath"", modelDocPath);

        importMapping.put(""List"", ""java.util.List"");

        if (fullJavaUtil) {
            typeMapping.put(""array"", ""java.util.List"");
            typeMapping.put(""map"", ""java.util.Map"");
            typeMapping.put(""DateTime"", ""java.util.Date"");
            typeMapping.put(""UUID"", ""java.util.UUID"");
            typeMapping.remove(""List"");
            importMapping.remove(""Date"");
            importMapping.remove(""Map"");
            importMapping.remove(""HashMap"");
            importMapping.remove(""Array"");
            importMapping.remove(""ArrayList"");
            importMapping.remove(""List"");
            importMapping.remove(""Set"");
            importMapping.remove(""DateTime"");
            importMapping.remove(""UUID"");
            instantiationTypes.put(""array"", ""java.util.ArrayList"");
            instantiationTypes.put(""map"", ""java.util.HashMap"");
        }

        this.sanitizeConfig();

        // optional jackson mappings for BigDecimal support
        importMapping.put(""ToStringSerializer"", ""com.fasterxml.jackson.databind.ser.std.ToStringSerializer"");
        importMapping.put(""JsonSerialize"", ""com.fasterxml.jackson.databind.annotation.JsonSerialize"");

        // imports for pojos
        importMapping.put(""ApiModelProperty"", ""io.swagger.annotations.ApiModelProperty"");
        importMapping.put(""ApiModel"", ""io.swagger.annotations.ApiModel"");
        importMapping.put(""JsonProperty"", ""com.fasterxml.jackson.annotation.JsonProperty"");
        importMapping.put(""JsonSubTypes"", ""com.fasterxml.jackson.annotation.JsonSubTypes"");
        importMapping.put(""JsonTypeInfo"", ""com.fasterxml.jackson.annotation.JsonTypeInfo"");
        importMapping.put(""JsonCreator"", ""com.fasterxml.jackson.annotation.JsonCreator"");
        importMapping.put(""JsonValue"", ""com.fasterxml.jackson.annotation.JsonValue"");
        importMapping.put(""SerializedName"", ""com.google.gson.annotations.SerializedName"");
        importMapping.put(""TypeAdapter"", ""com.google.gson.TypeAdapter"");
        importMapping.put(""JsonAdapter"", ""com.google.gson.annotations.JsonAdapter"");
        importMapping.put(""JsonReader"", ""com.google.gson.stream.JsonReader"");
        importMapping.put(""JsonWriter"", ""com.google.gson.stream.JsonWriter"");
        importMapping.put(""IOException"", ""java.io.IOException"");
        importMapping.put(""Objects"", ""java.util.Objects"");
        importMapping.put(""StringUtil"", invokerPackage + "".StringUtil"");
        // import JsonCreator if JsonProperty is imported
        // used later in recursive import in postProcessingModels
        importMapping.put(""com.fasterxml.jackson.annotation.JsonProperty"", ""com.fasterxml.jackson.annotation.JsonCreator"");

        if (additionalProperties.containsKey(JAVA8_MODE)) {
            setJava8Mode(Boolean.parseBoolean(additionalProperties.get(JAVA8_MODE).toString()));
            if ( java8Mode ) {
                additionalProperties.put(""java8"", true);
            }
        }

        if (additionalProperties.containsKey(SUPPORT_ASYNC)) {
            setSupportAsync(Boolean.parseBoolean(additionalProperties.get(SUPPORT_ASYNC).toString()));
            if (supportAsync) {
                additionalProperties.put(SUPPORT_ASYNC, ""true"");
            }
        }

        if (additionalProperties.containsKey(WITH_XML)) {
            setWithXml(Boolean.parseBoolean(additionalProperties.get(WITH_XML).toString()));
            if ( withXml ) {
                additionalProperties.put(WITH_XML, ""true"");
            }
        }

        if (additionalProperties.containsKey(DATE_LIBRARY)) {
            setDateLibrary(additionalProperties.get(""dateLibrary"").toString());
        }

        if (""threetenbp"".equals(dateLibrary)) {
            additionalProperties.put(""threetenbp"", true);
            additionalProperties.put(""jsr310"", ""true"");
            typeMapping.put(""date"", ""LocalDate"");
            typeMapping.put(""DateTime"", ""OffsetDateTime"");
            importMapping.put(""LocalDate"", ""org.threeten.bp.LocalDate"");
            importMapping.put(""OffsetDateTime"", ""org.threeten.bp.OffsetDateTime"");
        } else if (""joda"".equals(dateLibrary)) {
            additionalProperties.put(""joda"", true);
            typeMapping.put(""date"", ""LocalDate"");
            typeMapping.put(""DateTime"", ""DateTime"");
            importMapping.put(""LocalDate"", ""org.joda.time.LocalDate"");
            importMapping.put(""DateTime"", ""org.joda.time.DateTime"");
        } else if (dateLibrary.startsWith(""java8"")) {
            additionalProperties.put(""java8"", true);
            additionalProperties.put(""jsr310"", ""true"");
            if (""java8-localdatetime"".equals(dateLibrary)) {
                typeMapping.put(""date"", ""LocalDate"");
                typeMapping.put(""DateTime"", ""LocalDateTime"");
                importMapping.put(""LocalDate"", ""java.time.LocalDate"");
                importMapping.put(""LocalDateTime"", ""java.time.LocalDateTime"");
            } else if (""java8-instant"".equals(dateLibrary)) {
                typeMapping.put(""date"", ""Instant"");
                typeMapping.put(""DateTime"", ""Instant"");
                importMapping.put(""Instant"", ""java.time.Instant"");
            } else {
                typeMapping.put(""date"", ""LocalDate"");
                typeMapping.put(""DateTime"", ""OffsetDateTime"");
                importMapping.put(""LocalDate"", ""java.time.LocalDate"");
                importMapping.put(""OffsetDateTime"", ""java.time.OffsetDateTime"");
            }
        } else if (dateLibrary.equals(""legacy"")) {
            additionalProperties.put(""legacyDates"", true);
        }

        if (this.skipAliasGeneration == null) {
            this.skipAliasGeneration = Boolean.TRUE;
        }
    }
"
"modules/swagger-codegen/src/test/java/io/swagger/codegen/jaxrs/JaxRSServerOptionsTest.java:[28,82]:setExpectations","    protected void setExpectations() {
        new Expectations(clientCodegen) {{
            clientCodegen.setModelPackage(JaxRSServerOptionsProvider.MODEL_PACKAGE_VALUE);
            times = 1;
            clientCodegen.setApiPackage(JaxRSServerOptionsProvider.API_PACKAGE_VALUE);
            times = 1;
            clientCodegen.setSortParamsByRequiredFlag(Boolean.valueOf(JaxRSServerOptionsProvider.SORT_PARAMS_VALUE));
            times = 1;
            clientCodegen.setInvokerPackage(JaxRSServerOptionsProvider.INVOKER_PACKAGE_VALUE);
            times = 1;
            clientCodegen.setGroupId(JaxRSServerOptionsProvider.GROUP_ID_VALUE);
            times = 1;
            clientCodegen.setArtifactId(JaxRSServerOptionsProvider.ARTIFACT_ID_VALUE);
            times = 1;
            clientCodegen.setArtifactVersion(JaxRSServerOptionsProvider.ARTIFACT_VERSION_VALUE);
            times = 1;
            clientCodegen.setArtifactUrl(JaxRSServerOptionsProvider.ARTIFACT_URL_VALUE);
            times = 1;
            clientCodegen.setArtifactDescription(JaxRSServerOptionsProvider.ARTIFACT_DESCRIPTION_VALUE);
            times = 1;
            clientCodegen.setScmConnection(JaxRSServerOptionsProvider.SCM_CONNECTION_VALUE);
            times = 1;
            clientCodegen.setScmDeveloperConnection(JaxRSServerOptionsProvider.SCM_DEVELOPER_CONNECTION_VALUE);
            times = 1;
            clientCodegen.setScmUrl(JaxRSServerOptionsProvider.SCM_URL_VALUE);
            times = 1;
            clientCodegen.setDeveloperName(JaxRSServerOptionsProvider.DEVELOPER_NAME_VALUE);
            times = 1;
            clientCodegen.setDeveloperEmail(JaxRSServerOptionsProvider.DEVELOPER_EMAIL_VALUE);
            times = 1;
            clientCodegen.setDeveloperOrganization(JaxRSServerOptionsProvider.DEVELOPER_ORGANIZATION_VALUE);
            times = 1;
            clientCodegen.setDeveloperOrganizationUrl(JaxRSServerOptionsProvider.DEVELOPER_ORGANIZATION_URL_VALUE);
            times = 1;
            clientCodegen.setSourceFolder(JaxRSServerOptionsProvider.SOURCE_FOLDER_VALUE);
            times = 1;
            clientCodegen.setLocalVariablePrefix(JaxRSServerOptionsProvider.LOCAL_PREFIX_VALUE);
            times = 1;
            clientCodegen.setSerializableModel(Boolean.valueOf(JaxRSServerOptionsProvider.SERIALIZABLE_MODEL_VALUE));
            times = 1;
            //clientCodegen.setLibrary(JaxRSServerOptionsProvider.JAXRS_LIBRARY_VALUE);
            clientCodegen.setLibrary(""jersey1"");
            times = 1;
            clientCodegen.setFullJavaUtil(Boolean.valueOf(JaxRSServerOptionsProvider.FULL_JAVA_UTIL_VALUE));
            times = 1;
            clientCodegen.setDateLibrary(""joda"");
            times = 1;
            clientCodegen.setSupportJava6(false);
            times = 1;
            clientCodegen.setUseBeanValidation(Boolean.valueOf(JaxRSServerOptionsProvider.USE_BEANVALIDATION));
            times = 1;           
            clientCodegen.setUseTags(Boolean.valueOf(JaxRSServerOptionsProvider.USE_TAGS));
            times = 1;
        }};
    }
"
"modules/swagger-codegen/src/test/java/io/swagger/codegen/config/CodegenConfiguratorTest.java:[30,370]:CodegenConfiguratorTest","public class CodegenConfiguratorTest {

    @Mocked
    SwaggerParser parser;

    @Mocked
    AuthParser authParser;

    @Injectable
    Swagger swagger;

    @Mocked
    CodegenConfigLoader codegenConfigLoader;

    @Injectable
    List<AuthorizationValue> authorizationValues;

    @Tested
    CodegenConfigurator configurator;

    @SuppressWarnings(""unused"")
    @Test
    public void testVerbose() throws Exception {

        configurator.setVerbose(true);

        new StrictExpectations(System.class) {{
            System.setProperty(""debugSwagger"", """");
            times = 1;
            System.setProperty(""debugModels"", """");
            times = 1;
            System.setProperty(""debugOperations"", """");
            times = 1;
            System.setProperty(""debugSupportingFiles"", """");
            times = 1;
        }};

        setupAndRunGenericTest(configurator);
    }

    @Test
    public void testTemplateDir() throws Exception {

        final String templateDir = ""src/test/resources"";
        configurator.setTemplateDir(templateDir);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.TEMPLATE_DIR, toAbsolutePathDir(templateDir));
    }

    @SuppressWarnings(""unused"")
    @Test
    public void testSystemProperties() throws Exception {

        configurator.addSystemProperty(""hello"", ""world"")
                .addSystemProperty(""foo"", ""bar"");

        new Expectations(System.class) {{
            System.setProperty(""hello"", ""world"");
            times = 1;
            System.setProperty(""foo"", ""bar"");
            times = 1;
        }};

        setupAndRunGenericTest(configurator);
    }

    @Test
    public void testSkipOverwrite() throws Exception {
        CodegenConfigurator configurator1 = new CodegenConfigurator();
        configurator1.setSkipOverwrite(true);

        ClientOptInput clientOptInput = setupAndRunGenericTest(configurator1);
        assertTrue(clientOptInput.getConfig().isSkipOverwrite());

        CodegenConfigurator configurator2 = new CodegenConfigurator();
        configurator1.setSkipOverwrite(true);

        clientOptInput = setupAndRunGenericTest(configurator2);
        assertFalse(clientOptInput.getConfig().isSkipOverwrite());
    }

    @Test
    public void testApiPackage() throws Exception {
        final String apiPackage = ""io.foo.bar.api"";
        configurator.setApiPackage(apiPackage);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.API_PACKAGE, apiPackage);
    }


    @Test
    public void testModelPackage() throws Exception {
        final String modelPackage = ""io.foo.bar.models"";
        configurator.setModelPackage(modelPackage);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.MODEL_PACKAGE, modelPackage);
    }

    @Test
    public void testInstantiationTypes() throws Exception {

        configurator.addInstantiationType(""foo"", ""bar"")
                .addInstantiationType(""hello"", ""world"");

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().instantiationTypes(), ""foo"", ""bar"");
        assertValueInMap(clientOptInput.getConfig().instantiationTypes(), ""hello"", ""world"");
    }

    @Test
    public void testTypeMappings() throws Exception {

        configurator.addTypeMapping(""foo"", ""bar"")
                .addTypeMapping(""hello"", ""world"");

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().typeMapping(), ""foo"", ""bar"");
        assertValueInMap(clientOptInput.getConfig().typeMapping(), ""hello"", ""world"");
    }

    @Test
    public void testAdditionalProperties() throws Exception {

        configurator.addAdditionalProperty(""foo"", ""bar"")
                .addAdditionalProperty(""hello"", ""world"")
                .addAdditionalProperty(""supportJava6"", false)
                .addAdditionalProperty(""useRxJava"", true);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""foo"", ""bar"");
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""hello"", ""world"");
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""supportJava6"", false);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""useRxJava"", true);
    }

    @Test
    public void testLanguageSpecificPrimitives() throws Exception {

        configurator.addLanguageSpecificPrimitive(""foo"")
                .addLanguageSpecificPrimitive(""bar"")
                .addLanguageSpecificPrimitive(""hello"")
                .addLanguageSpecificPrimitive(""world"");

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertTrue(clientOptInput.getConfig().languageSpecificPrimitives().contains(""foo""));
        assertTrue(clientOptInput.getConfig().languageSpecificPrimitives().contains(""bar""));
        assertTrue(clientOptInput.getConfig().languageSpecificPrimitives().contains(""hello""));
        assertTrue(clientOptInput.getConfig().languageSpecificPrimitives().contains(""world""));
    }

    @Test
    public void testImportMappings() throws Exception {

        configurator.addImportMapping(""foo"", ""bar"")
                .addImportMapping(""hello"", ""world"");

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().importMapping(), ""foo"", ""bar"");
        assertValueInMap(clientOptInput.getConfig().importMapping(), ""hello"", ""world"");
    }

    @Test
    public void testInvokerPackage() throws Exception {
        final String invokerPackage = ""io.foo.bar.models"";
        configurator.setInvokerPackage(invokerPackage);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.INVOKER_PACKAGE, invokerPackage);
    }

    @Test
    public void testGroupId() throws Exception {
        final String expectedValue = ""io.foo.bar.models"";
        configurator.setGroupId(expectedValue);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.GROUP_ID, expectedValue);
    }

    @Test
    public void testArtifactId() throws Exception {
        final String expectedValue = ""io.foo.bar.models"";
        configurator.setArtifactId(expectedValue);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.ARTIFACT_ID, expectedValue);
    }

    @Test
    public void testArtifactVersion() throws Exception {
        final String expectedValue = ""1.2.3"";
        configurator.setArtifactVersion(expectedValue);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.ARTIFACT_VERSION, expectedValue);
    }

    @Test
    public void testLibrary() throws Exception {
        final String expectedValue = ""jersey2"";

        configurator.setLibrary(expectedValue);
        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertEquals(clientOptInput.getConfig().getLibrary(), expectedValue);
    }

    @Test
    public void testDynamicProperties() throws Exception {
        configurator.addDynamicProperty(CodegenConstants.LOCAL_VARIABLE_PREFIX, ""_"");
        configurator.addDynamicProperty(""supportJava6"", false);
        configurator.addDynamicProperty(""useRxJava"", true);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.LOCAL_VARIABLE_PREFIX, ""_"");
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""supportJava6"", false);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""useRxJava"", true);
    }

    @Test
    public void testFromFile() throws Exception {
        final CodegenConfigurator configurator = CodegenConfigurator.fromFile(""src/test/resources/sampleConfig.json"");

        assertEquals(configurator.getLang(), ""java"");
        assertEquals(configurator.getInputSpec(), ""swagger.yaml"");
        assertEquals(configurator.getOutputDir(), toAbsolutePathDir(""src/gen/java""));
        assertEquals(configurator.isVerbose(), true);
        assertEquals(configurator.isSkipOverwrite(), true);
        assertEquals(configurator.getTemplateDir(), toAbsolutePathDir(""src/main/resources""));
        assertEquals(configurator.getAuth(), ""hello:world"");
        assertEquals(configurator.getApiPackage(), ""io.something.api"");
        assertEquals(configurator.getModelPackage(), ""io.something.models"");
        assertEquals(configurator.getInvokerPackage(), ""io.something.invoker"");
        assertEquals(configurator.getGroupId(), ""io.something"");
        assertEquals(configurator.getArtifactId(), ""awesome-api"");
        assertEquals(configurator.getArtifactVersion(), ""1.2.3"");
        assertEquals(configurator.getLibrary(), ""jersey2"");

        assertEquals(configurator.getSystemProperties().size(), 1);
        assertValueInMap(configurator.getSystemProperties(), ""systemProp1"", ""value1"");

        assertEquals(configurator.getInstantiationTypes().size(), 1);
        assertValueInMap(configurator.getInstantiationTypes(), ""hello"", ""world"");

        assertEquals(configurator.getTypeMappings().size(), 1);
        assertValueInMap(configurator.getTypeMappings(), ""foo"", ""bar"");

        assertEquals(configurator.getAdditionalProperties().size(), 1);
        assertValueInMap(configurator.getAdditionalProperties(), ""addtProp1"", ""value2"");

        assertEquals(configurator.getImportMappings().size(), 1);
        assertValueInMap(configurator.getImportMappings(), ""type1"", ""import1"");


        assertEquals(configurator.getLanguageSpecificPrimitives().size(), 1);
        assertTrue(configurator.getLanguageSpecificPrimitives().contains(""rolex""));

        assertEquals(configurator.getDynamicProperties().size(), 1);
        assertValueInMap(configurator.getDynamicProperties(), CodegenConstants.LOCAL_VARIABLE_PREFIX, ""_"");

        assertEquals(configurator.getIgnoreFileOverride(), ""/path/to/override/.swagger-codegen-ignore"");
    }

    @Test
    public void testCodegenConfiguratorIsSerializable() {
        final CodegenConfigurator configurator = CodegenConfigurator.fromFile(""src/test/resources/sampleConfig.json"");
        // Simply ensure that the object can be serialized
        SerializationUtils.serialize(configurator);
    }

    @SuppressWarnings(""unused"")
    private ClientOptInput setupAndRunGenericTest(CodegenConfigurator configurator) {

        final String spec = ""swagger.yaml"";
        final String lang = ""java"";
        final String outputDir = ""src/test/java"";
        final String expectedAuth = ""hello:world"";


        configurator.setLang(lang)
                .setOutputDir(outputDir)
                .setInputSpec(spec)
                .setAuth(expectedAuth);

        final CodegenConfig config = new JavaClientCodegen();

        setupStandardExpectations(spec, lang, configurator.getAuth(), config);

        ClientOptInput result = configurator.toClientOptInput();

        new FullVerifications() {{
        }};

        final String expectedOutputDir = toAbsolutePathDir(outputDir);

        assertEquals(result.getConfig().getOutputDir(), expectedOutputDir);

        return result;
    }

    private static String toAbsolutePathDir(String outputDir) {
        return Paths.get(outputDir).toAbsolutePath().toAbsolutePath().toString();
    }

    @SuppressWarnings(""unused"")
    private void setupStandardExpectations(final String spec, final String languageName, final String auth, final CodegenConfig config) {

        new StrictExpectations() {{
            CodegenConfigLoader.forName(languageName);
            times = 1;
            result = config;

            AuthParser.parse(auth); times=1; result = authorizationValues;

            new SwaggerParser();
            times = 1;
            result = parser;

            parser.read(spec, authorizationValues, true);
            times = 1;
            result = swagger;

        }};
    }

    private static void assertValueInMap(Map<?, ?> map, String propertyKey, Object expectedPropertyValue) {
        assertTrue(map.containsKey(propertyKey));
        assertEquals(map.get(propertyKey), expectedPropertyValue);
    }

}
"
"modules/swagger-codegen/src/test/java/io/swagger/codegen/config/CodegenConfiguratorTest.java:[157,170]:testAdditionalProperties","    public void testAdditionalProperties() throws Exception {

        configurator.addAdditionalProperty(""foo"", ""bar"")
                .addAdditionalProperty(""hello"", ""world"")
                .addAdditionalProperty(""supportJava6"", false)
                .addAdditionalProperty(""useRxJava"", true);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""foo"", ""bar"");
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""hello"", ""world"");
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""supportJava6"", false);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""useRxJava"", true);
    }
"
"modules/swagger-codegen/src/test/java/io/swagger/codegen/config/CodegenConfiguratorTest.java:[247,257]:testDynamicProperties","    public void testDynamicProperties() throws Exception {
        configurator.addDynamicProperty(CodegenConstants.LOCAL_VARIABLE_PREFIX, ""_"");
        configurator.addDynamicProperty(""supportJava6"", false);
        configurator.addDynamicProperty(""useRxJava"", true);

        final ClientOptInput clientOptInput = setupAndRunGenericTest(configurator);

        assertValueInMap(clientOptInput.getConfig().additionalProperties(), CodegenConstants.LOCAL_VARIABLE_PREFIX, ""_"");
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""supportJava6"", false);
        assertValueInMap(clientOptInput.getConfig().additionalProperties(), ""useRxJava"", true);
    }
"
"modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavaJerseyServerCodegen.java:[25,53]:JavaJerseyServerCodegen","    public JavaJerseyServerCodegen() {
        super();

        outputFolder = ""generated-code/JavaJaxRS-Jersey"";

        apiTemplateFiles.put(""apiService.mustache"", "".java"");
        apiTemplateFiles.put(""apiServiceImpl.mustache"", "".java"");
        apiTemplateFiles.put(""apiServiceFactory.mustache"", "".java"");
        apiTestTemplateFiles.clear(); // TODO: add test template

        // clear model and api doc template as this codegen
        // does not support auto-generated markdown doc at the moment
        //TODO: add doc templates
        modelDocTemplateFiles.remove(""model_doc.mustache"");
        apiDocTemplateFiles.remove(""api_doc.mustache"");

        embeddedTemplateDir = templateDir = JAXRS_TEMPLATE_DIRECTORY_NAME;

        CliOption library = new CliOption(CodegenConstants.LIBRARY, ""library template (sub-template) to use"");

        supportedLibraries.put(LIBRARY_JERSEY1, ""Jersey core 1.x"");
        supportedLibraries.put(LIBRARY_JERSEY2, ""Jersey core 2.x"");
        library.setEnum(supportedLibraries);
        library.setDefault(DEFAULT_LIBRARY);

        cliOptions.add(library);
        cliOptions.add(CliOption.newBoolean(SUPPORT_JAVA6, ""Whether to support Java6 with the Jersey1/2 library.""));
        cliOptions.add(CliOption.newBoolean(USE_TAGS, ""use tags for creating interface and controller classnames""));
    }
"
"modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavaJerseyServerCodegen.java:[85,120]:processOpts","    public void processOpts() {
        super.processOpts();

        // use default library if unset
        if (StringUtils.isEmpty(library)) {
            setLibrary(DEFAULT_LIBRARY);
        }
        
        if ( additionalProperties.containsKey(CodegenConstants.IMPL_FOLDER)) {
            implFolder = (String) additionalProperties.get(CodegenConstants.IMPL_FOLDER);
        }
    
        if (additionalProperties.containsKey(USE_TAGS)) {
            this.setUseTags(Boolean.valueOf(additionalProperties.get(USE_TAGS).toString()));
        }

        if (""joda"".equals(dateLibrary)) {
            supportingFiles.add(new SupportingFile(""JodaDateTimeProvider.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""JodaDateTimeProvider.java""));
            supportingFiles.add(new SupportingFile(""JodaLocalDateProvider.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""JodaLocalDateProvider.java""));
        } else if ( dateLibrary.startsWith(""java8"") ) {
            supportingFiles.add(new SupportingFile(""OffsetDateTimeProvider.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""OffsetDateTimeProvider.java""));
            supportingFiles.add(new SupportingFile(""LocalDateProvider.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""LocalDateProvider.java""));
        }

        writeOptional(outputFolder, new SupportingFile(""pom.mustache"", """", ""pom.xml""));
        writeOptional(outputFolder, new SupportingFile(""README.mustache"", """", ""README.md""));
        supportingFiles.add(new SupportingFile(""ApiException.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""ApiException.java""));
        supportingFiles.add(new SupportingFile(""ApiOriginFilter.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""ApiOriginFilter.java""));
        supportingFiles.add(new SupportingFile(""ApiResponseMessage.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""ApiResponseMessage.java""));
        supportingFiles.add(new SupportingFile(""NotFoundException.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""NotFoundException.java""));
        supportingFiles.add(new SupportingFile(""jacksonJsonProvider.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""JacksonJsonProvider.java""));
        supportingFiles.add(new SupportingFile(""RFC3339DateFormat.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""RFC3339DateFormat.java""));
        writeOptional(outputFolder, new SupportingFile(""bootstrap.mustache"", (implFolder + '/' + apiPackage).replace(""."", ""/""), ""Bootstrap.java""));
        writeOptional(outputFolder, new SupportingFile(""web.mustache"", (""src/main/webapp/WEB-INF""), ""web.xml""));
        supportingFiles.add(new SupportingFile(""StringUtil.mustache"", (sourceFolder + '/' + apiPackage).replace(""."", ""/""), ""StringUtil.java""));
    }
"
