Vul_Path,Vul_Src,
"xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java:[118,127]:doGet","    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        String host = request.getParameter(""host"");
        // Check special cases where we need to change host to get a favicon
        host = ""gmail.com"".equals(host) ? ""google.com"" : host;

        byte[] bytes = getImage(host, defaultBytes);
        if (bytes != null) {
            writeBytesToStream(bytes, response);
        }
    }
"
"xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java:[153,182]:getImage","private byte[] getImage(String host, byte[] defaultImage) {
        // If we've already attempted to get the favicon twice and failed,
        // return the default image.
        if (missesCache.get(host) != null && missesCache.get(host) > 1) {
            // Domain does not have a favicon so return default icon
            return defaultImage;
        }
        // See if we've cached the favicon.
        if (hitsCache.containsKey(host)) {
            return hitsCache.get(host);
        }
        byte[] bytes = getImage(""http://"" + host + ""/favicon.ico"");
        if (bytes == null) {
            // Cache that the requested domain does not have a favicon. Check if this
            // is the first cache miss or the second.
            if (missesCache.get(host) != null) {
                missesCache.put(host, 2);
            }
            else {
                missesCache.put(host, 1);
            }
            // Return byte of default icon
            bytes = defaultImage;
        }
        // Cache the favicon.
        else {
            hitsCache.put(host, bytes);
        }
        return bytes;
    }
"
"xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java:[184,204]:getImage","    private byte[] getImage(String url) {
        // Try to get the fiveicon from the url using an HTTP connection from the pool
        // that also allows to configure timeout values (e.g. connect and get data)
        final RequestConfig requestConfig = RequestConfig.custom()
            .setConnectTimeout(2000)
            .setSocketTimeout(2000)
            .build();
        final HttpUriRequest getRequest = RequestBuilder.get(url)
            .setConfig(requestConfig)
            .build();

        try(final CloseableHttpResponse response = client.execute(getRequest)) {
            if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return EntityUtils.toByteArray(response.getEntity());
            }
        } catch (final IOException ignored) {
            // Do nothing
        }

        return null;
    }
"
