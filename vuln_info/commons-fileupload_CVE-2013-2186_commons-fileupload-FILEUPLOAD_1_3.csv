Vul_Path,Vul_Src
"src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java:[189,198]:DiskFileItem","    public DiskFileItem(String fieldName,
            String contentType, boolean isFormField, String fileName,
            int sizeThreshold, File repository) {
        this.fieldName = fieldName;
        this.contentType = contentType;
        this.isFormField = isFormField;
        this.fileName = fileName;
        this.sizeThreshold = sizeThreshold;
        this.repository = repository;
    }
"
"src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java:[654,671]:readObject","    private void readObject(ObjectInputStream in)
            throws IOException, ClassNotFoundException {
        // read values
        in.defaultReadObject();

        OutputStream output = getOutputStream();
        if (cachedContent != null) {
            output.write(cachedContent);
        } else {
            FileInputStream input = new FileInputStream(dfosFile);
            IOUtils.copy(input, output);
            dfosFile.delete();
            dfosFile = null;
        }
        output.close();

        cachedContent = null;
    }
"
"src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java:[41,225]:DiskFileItemSerializeTest","public class DiskFileItemSerializeTest {

    /**
     * Content type for regular form items.
     */
    private static final String textContentType = ""text/plain"";

    /**
     * Very low threshold for testing memory versus disk options.
     */
    private static final int threshold = 16;

    /**
     * Test creation of a field for which the amount of data falls below the
     * configured threshold.
     */
    @Test
    public void testBelowThreshold() throws Exception {
        // Create the FileItem
        byte[] testFieldValueBytes = createContentBytes(threshold - 1);
        FileItem item = createFileItem(testFieldValueBytes);

        // Check state is as expected
        assertTrue(""Initial: in memory"", item.isInMemory());
        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);
        compareBytes(""Initial"", item.get(), testFieldValueBytes);

        // Serialize & Deserialize
        FileItem newItem = (FileItem)serializeDeserialize(item);

        // Test deserialized content is as expected
        assertTrue(""Check in memory"", newItem.isInMemory());
        compareBytes(""Check"", testFieldValueBytes, newItem.get());

        // Compare FileItem's (except byte[])
        compareFileItems(item, newItem);
    }

    /**
     * Test creation of a field for which the amount of data equals the
     * configured threshold.
     */
    @Test
    public void testThreshold() throws Exception {
        // Create the FileItem
        byte[] testFieldValueBytes = createContentBytes(threshold);
        FileItem item = createFileItem(testFieldValueBytes);

        // Check state is as expected
        assertTrue(""Initial: in memory"", item.isInMemory());
        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);
        compareBytes(""Initial"", item.get(), testFieldValueBytes);


        // Serialize & Deserialize
        FileItem newItem = (FileItem)serializeDeserialize(item);

        // Test deserialized content is as expected
        assertTrue(""Check in memory"", newItem.isInMemory());
        compareBytes(""Check"", testFieldValueBytes, newItem.get());

        // Compare FileItem's (except byte[])
        compareFileItems(item, newItem);
    }

    /**
     * Test creation of a field for which the amount of data falls above the
     * configured threshold.
     */
    @Test
    public void testAboveThreshold() throws Exception {
        // Create the FileItem
        byte[] testFieldValueBytes = createContentBytes(threshold + 1);
        FileItem item = createFileItem(testFieldValueBytes);

        // Check state is as expected
        assertFalse(""Initial: in memory"", item.isInMemory());
        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);
        compareBytes(""Initial"", item.get(), testFieldValueBytes);

        // Serialize & Deserialize
        FileItem newItem = (FileItem)serializeDeserialize(item);

        // Test deserialized content is as expected
        assertFalse(""Check in memory"", newItem.isInMemory());
        compareBytes(""Check"", testFieldValueBytes, newItem.get());

        // Compare FileItem's (except byte[])
        compareFileItems(item, newItem);
    }

    /**
     * Compare FileItem's (except the byte[] content)
     */
    private void compareFileItems(FileItem origItem, FileItem newItem) {
        assertTrue(""Compare: is in Memory"",   origItem.isInMemory()   == newItem.isInMemory());
        assertTrue(""Compare: is Form Field"",  origItem.isFormField()  == newItem.isFormField());
        assertEquals(""Compare: Field Name"",   origItem.getFieldName(),   newItem.getFieldName());
        assertEquals(""Compare: Content Type"", origItem.getContentType(), newItem.getContentType());
        assertEquals(""Compare: File Name"",    origItem.getName(),        newItem.getName());
    }

    /**
     * Compare content bytes.
     */
    private void compareBytes(String text, byte[] origBytes, byte[] newBytes) {
        assertNotNull(""origBytes must not be null"", origBytes);
        assertNotNull(""newBytes must not be null"", newBytes);
        assertEquals(text + "" byte[] length"", origBytes.length, newBytes.length);
        for (int i = 0; i < origBytes.length; i++) {
            assertEquals(text + "" byte["" + i + ""]"", origBytes[i], newBytes[i]);
        }
    }

    /**
     * Create content bytes of a specified size.
     */
    private byte[] createContentBytes(int size) {
        StringBuffer buffer = new StringBuffer(size);
        byte count = 0;
        for (int i = 0; i < size; i++) {
            buffer.append(count+"""");
            count++;
            if (count > 9) {
                count = 0;
            }
        }
        return buffer.toString().getBytes();
    }

    /**
     * Create a FileItem with the specfied content bytes.
     */
    private FileItem createFileItem(byte[] contentBytes) {
        FileItemFactory factory = new DiskFileItemFactory(threshold, null);
        String textFieldName = ""textField"";

        FileItem item = factory.createItem(
                textFieldName,
                textContentType,
                true,
                ""My File Name""
        );
        try {
            OutputStream os = item.getOutputStream();
            os.write(contentBytes);
            os.close();
        } catch(IOException e) {
            fail(""Unexpected IOException"" + e);
        }

        return item;

    }

    /**
     * Do serialization and deserialization.
     */
    private Object serializeDeserialize(Object target) {
        // Serialize the test object
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(target);
            oos.flush();
            oos.close();
        } catch (Exception e) {
            fail(""Exception during serialization: "" + e);
        }

        // Deserialize the test object
        Object result = null;
        try {
            ByteArrayInputStream bais =
                new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            result = ois.readObject();
            bais.close();
        } catch (Exception e) {
            fail(""Exception during deserialization: "" + e);
        }
        return result;
    }

}
"
"src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java:[58,77]:testBelowThreshold","    public void testBelowThreshold() throws Exception {
        // Create the FileItem
        byte[] testFieldValueBytes = createContentBytes(threshold - 1);
        FileItem item = createFileItem(testFieldValueBytes);

        // Check state is as expected
        assertTrue(""Initial: in memory"", item.isInMemory());
        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);
        compareBytes(""Initial"", item.get(), testFieldValueBytes);

        // Serialize & Deserialize
        FileItem newItem = (FileItem)serializeDeserialize(item);

        // Test deserialized content is as expected
        assertTrue(""Check in memory"", newItem.isInMemory());
        compareBytes(""Check"", testFieldValueBytes, newItem.get());

        // Compare FileItem's (except byte[])
        compareFileItems(item, newItem);
    }
"
"src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java:[84,104]:testThreshold","    public void testThreshold() throws Exception {
        // Create the FileItem
        byte[] testFieldValueBytes = createContentBytes(threshold);
        FileItem item = createFileItem(testFieldValueBytes);

        // Check state is as expected
        assertTrue(""Initial: in memory"", item.isInMemory());
        assertEquals(""Initial: size"", item.getSize(), testFieldValueBytes.length);
        compareBytes(""Initial"", item.get(), testFieldValueBytes);


        // Serialize & Deserialize
        FileItem newItem = (FileItem)serializeDeserialize(item);

        // Test deserialized content is as expected
        assertTrue(""Check in memory"", newItem.isInMemory());
        compareBytes(""Check"", testFieldValueBytes, newItem.get());

        // Compare FileItem's (except byte[])
        compareFileItems(item, newItem);
    }
"
"src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java:[174,194]:createFileItem","    private FileItem createFileItem(byte[] contentBytes) {
        FileItemFactory factory = new DiskFileItemFactory(threshold, null);
        String textFieldName = ""textField"";

        FileItem item = factory.createItem(
                textFieldName,
                textContentType,
                true,
                ""My File Name""
        );
        try {
            OutputStream os = item.getOutputStream();
            os.write(contentBytes);
            os.close();
        } catch(IOException e) {
            fail(""Unexpected IOException"" + e);
        }

        return item;

    }
"
"src/test/java/org/apache/commons/fileupload/DiskFileItemSerializeTest.java:[199,223]:serializeDeserialize","    private Object serializeDeserialize(Object target) {
        // Serialize the test object
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(target);
            oos.flush();
            oos.close();
        } catch (Exception e) {
            fail(""Exception during serialization: "" + e);
        }

        // Deserialize the test object
        Object result = null;
        try {
            ByteArrayInputStream bais =
                new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            result = ois.readObject();
            bais.close();
        } catch (Exception e) {
            fail(""Exception during deserialization: "" + e);
        }
        return result;
    }
"
