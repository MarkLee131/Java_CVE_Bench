Vul_Path,Vul_Src
"plugins/core/src/main/java/org/apache/cxf/fediz/core/config/FedizContext.java:[85,87]:getAudienceUris","    public List<String> getAudienceUris() {
        return config.getAudienceUris().getAudienceItem();
    }
"
"plugins/core/src/main/java/org/apache/cxf/fediz/core/handler/SigninHandler.java:[66,86]:handleRequest","    public T handleRequest(HttpServletRequest request, HttpServletResponse response) {
        if (request.getMethod().equals(""POST"")) {
            LOG.debug(""Sign-In-Response received"");
            String responseToken = getResponseToken(request);
            if (responseToken != null) {
                LOG.debug(""Validating RSTR..."");
                // process and validate the token
                try {
                    FedizResponse federationResponse = processSigninRequest(responseToken, request, response);
                    validateAudienceRestrictions(federationResponse.getAudience(), request.getRequestURL().toString());
                    LOG.debug(""RSTR validated successfully"");
                    return createPrincipal(request, response, federationResponse);
                } catch (ProcessingException e) {
                    LOG.error(""Federation processing failed: "" + e.getMessage());
                }
            }
        } else {
            throw new RuntimeException(""Incorrect method GET for Sign-In-Response"");
        }
        return null;
    }
"
"plugins/core/src/main/java/org/apache/cxf/fediz/core/handler/SigninHandler.java:[112,136]:validateAudienceRestrictions","    protected boolean validateAudienceRestrictions(String audience, String requestURL) {
        // Validate the AudienceRestriction in Security Token (e.g. SAML) 
        // against the configured list of audienceURIs
        boolean validAudience = false;
        if (audience != null) {
            List<String> audienceURIs = fedizContext.getAudienceUris();
            for (String a : audienceURIs) {
                if (audience.startsWith(a)) {
                    validAudience = true;
                    LOG.debug(""Token audience matches with valid URIs."");
                    break;
                }
            }
            
            if (!validAudience) {
                LOG.warn(""Token AudienceRestriction [{}] doesn't match with specified list of URIs."");
                LOG.debug(""Authenticated URIs are: {}"", audience, audienceURIs);
            }
            
            if (LOG.isDebugEnabled() && requestURL != null && requestURL.indexOf(audience) == -1) {
                LOG.debug(""Token AudienceRestriction doesn't match with request URL [{}]  [{}]"", audience, requestURL);
            }
        }
        return validAudience;
    }
"
