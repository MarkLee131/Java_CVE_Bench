Vul_Path,Vul_Src
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[76,561]:ClientRegistrationService","public class ClientRegistrationService {

    private static final Logger LOG = LogUtils.getL7dLogger(ClientRegistrationService.class);

    private Map<String, Collection<Client>> registrations = new HashMap<>();
    private Map<String, Set<String>> clientNames = new HashMap<>();
    private OAuthDataProvider dataProvider;
    private ClientRegistrationProvider clientProvider;
    private Map<String, String> homeRealms = new LinkedHashMap<String, String>();
    private boolean protectIdTokenWithClientSecret;
    private Map<String, String> clientScopes;

    private MessageContext mc;
    private String userRole;

    @Context
    public void setMessageContext(MessageContext messageContext) {
        this.mc = messageContext;
    }

    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path(""/register"")
    public RegisterClient registerStart() {
        checkSecurityContext();
        return new RegisterClient(homeRealms);
    }

    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path(""/"")
    public RegisteredClients getClients() {
        checkSecurityContext();
        return new RegisteredClients(getClientRegistrations());
    }

    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}"")
    public Client getRegisteredClient(@PathParam(""id"") String id) {
        checkSecurityContext();
        for (Client c : getClientRegistrations()) {
            if (c.getClientId().equals(id)) {
                return c;
            }
        }
        return null;
    }


    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}/remove"")
    public RegisteredClients removeClient(@PathParam(""id"") String id,
                                          @FormParam(""client_csrfToken"") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);
        checkSecurityContext();
        
        Collection<Client> clients = getClientRegistrations();
        for (Iterator<Client> it = clients.iterator(); it.hasNext();) {
            Client c = it.next();
            if (c.getClientId().equals(id)) {
                clientProvider.removeClient(id);
                it.remove();
                Set<String> names = clientNames.get(getUserName());
                if (names != null) {
                    names.remove(c.getApplicationName());
                }
                break;
            }
        }
        return new RegisteredClients(clients);
    }
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}/reset"")
    public Client resetClient(@PathParam(""id"") String id,
                              @FormParam(""client_csrfToken"") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);
        checkSecurityContext();

        Client c = getRegisteredClient(id);
        if (c.isConfidential()) {
            c.setClientSecret(generateClientSecret());
        }
        clientProvider.setClient(c);
        return c;
    }

    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}/tokens"")
    public ClientTokens getClientIssuedTokens(@PathParam(""id"") String id) {
        checkSecurityContext();
        Client c = getRegisteredClient(id);
        return doGetClientIssuedTokens(c);
    }

    protected ClientTokens doGetClientIssuedTokens(Client c) {
        Comparator<ServerAccessToken> tokenComp = new TokenComparator();
        UserSubject subject = new OidcUserSubject(getUserName());
        List<ServerAccessToken> accessTokens =
            new ArrayList<ServerAccessToken>(dataProvider.getAccessTokens(c, subject));
        Collections.sort(accessTokens, tokenComp);
        List<RefreshToken> refreshTokens =
                new ArrayList<RefreshToken>(dataProvider.getRefreshTokens(c, subject));
        Collections.sort(refreshTokens, tokenComp);
        return new ClientTokens(c, accessTokens, refreshTokens);
    }
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}/at/{tokenId}/revoke"")
    public ClientTokens revokeClientAccessToken(@PathParam(""id"") String clientId,
                                                      @PathParam(""tokenId"") String tokenId,
                                                      @FormParam(""client_csrfToken"") String csrfToken) {
        
        return doRevokeClientToken(clientId, csrfToken, tokenId, OAuthConstants.ACCESS_TOKEN);
    }

    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}/rt/{tokenId}/revoke"")
    public ClientTokens revokeClientRefreshToken(@PathParam(""id"") String clientId,
                                                      @PathParam(""tokenId"") String tokenId,
                                                      @FormParam(""client_csrfToken"") String csrfToken) {
        return doRevokeClientToken(clientId, csrfToken, tokenId, OAuthConstants.REFRESH_TOKEN);
    }

    protected ClientTokens doRevokeClientToken(String clientId,
                                               String csrfToken,
                                               String tokenId,
                                               String tokenType) {
        // CSRF
        checkCSRFToken(csrfToken);
        checkSecurityContext();

        Client c = getRegisteredClient(clientId);
        dataProvider.revokeToken(c, tokenId, tokenType);
        return doGetClientIssuedTokens(c);
    }

    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}/codes"")
    public ClientCodeGrants getClientCodeGrants(@PathParam(""id"") String id) {
        checkSecurityContext();
        if (dataProvider instanceof AuthorizationCodeDataProvider) {
            Client c = getRegisteredClient(id);
            UserSubject subject = new OidcUserSubject(getUserName());
            List<ServerAuthorizationCodeGrant> codeGrants = new ArrayList<>(
               ((AuthorizationCodeDataProvider)dataProvider).getCodeGrants(c, subject));
            Collections.sort(codeGrants, new CodeGrantComparator());
            return new ClientCodeGrants(c, codeGrants);
        }
        return null;
    }

    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path(""/{id}/codes/{code}/revoke"")
    public ClientCodeGrants revokeClientCodeGrant(@PathParam(""id"") String id,
                                                  @PathParam(""code"") String code,
                                                  @FormParam(""client_csrfToken"") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);
        checkSecurityContext();

        if (dataProvider instanceof AuthorizationCodeDataProvider) {
            ((AuthorizationCodeDataProvider)dataProvider).removeCodeGrant(code);
            return getClientCodeGrants(id);
        }
        return null;
    }

    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path(""/"")
    public Response registerForm(@FormParam(""client_name"") String appName,
                                 @FormParam(""client_type"") String appType,
                                 @FormParam(""client_audience"") String audience,
                                 @FormParam(""client_redirectURI"") String redirectURI,
                                 @FormParam(""client_logoutURI"") String logoutURI,
                                 @FormParam(""client_homeRealm"") String homeRealm,
                                 @FormParam(""client_csrfToken"") String csrfToken
    ) {
        try {
            // CSRF
            checkCSRFToken(csrfToken);
            checkSecurityContext();

            // Client Name
            if (StringUtils.isEmpty(appName)) {
                throwInvalidRegistrationException(""The client name must not be empty"");
            }
            // Client Type
            if (StringUtils.isEmpty(appType)) {
                throwInvalidRegistrationException(""The client type must not be empty"");
            }
            if (!(""confidential"".equals(appType) || ""public"".equals(appType))) {
                throwInvalidRegistrationException(""An invalid client type was specified: "" + appType);
            }
            // Client ID
            String clientId = generateClientId();
            boolean isConfidential = ""confidential"".equals(appType);
            // Client Secret
            String clientSecret = isConfidential
                ? generateClientSecret()
                : null;

            Client newClient = new Client(clientId, clientSecret, isConfidential, appName);

            // User who registered this client
            String userName = getUserName();
            UserSubject userSubject = new OidcUserSubject(userName);
            newClient.setResourceOwnerSubject(userSubject);

            // Client Registration Time
            newClient.setRegisteredAt(System.currentTimeMillis() / 1000);

            // Client Realm
            if (homeRealm != null) {
                newClient.setHomeRealm(homeRealm);
                if (homeRealms.containsKey(homeRealm)) {
                    newClient.getProperties().put(""homeRealmAlias"", homeRealms.get(homeRealm));
                }
            }

            // Client Redirect URIs
            if (!StringUtils.isEmpty(redirectURI)) {
                String[] allUris = redirectURI.trim().split("" "");
                List<String> redirectUris = new LinkedList<String>();
                for (String uri : allUris) {
                    if (!StringUtils.isEmpty(uri)) {
                        if (!isValidURI(uri, false)) {
                            throwInvalidRegistrationException(""An invalid redirect URI was specified: "" + uri);
                        }
                        redirectUris.add(uri);
                    }
                }
                newClient.setRedirectUris(redirectUris);
            }
            // Client Logout URI
            if (!StringUtils.isEmpty(logoutURI)) {
                String[] logoutUris = logoutURI.split("" "");
                for (String uri : logoutUris) {
                    if (!isValidURI(uri, false)) {
                        throwInvalidRegistrationException(""An invalid logout URI was specified: "" + uri);
                    }
                }
                //TODO: replace this code with newClient.setLogoutUri() once it becomes available
                newClient.getProperties().put(""post_logout_redirect_uris"", logoutURI);
            }

            // Client Audience URIs
            if (!StringUtils.isEmpty(audience)) {
                String[] auds = audience.trim().split("" "");
                List<String> registeredAuds = new LinkedList<String>();
                for (String aud : auds) {
                    if (!StringUtils.isEmpty(aud)) {
                        if (!isValidURI(aud, true)) {
                            throwInvalidRegistrationException(""An invalid audience URI was specified: "" + aud);
                        }
                        registeredAuds.add(aud);
                    }
                }
                newClient.setRegisteredAudiences(registeredAuds);
            }

            // Client Scopes
            if (clientScopes != null && !clientScopes.isEmpty()) {
                newClient.setRegisteredScopes(new ArrayList<String>(clientScopes.keySet()));
            }
            return Response.ok(registerNewClient(newClient)).build();
        } catch (InvalidRegistrationException ex) {
            // For the view handlers to handle it
            return Response.ok(new InvalidRegistration(ex.getMessage())).build();
        }
    }

    private void checkSecurityContext() {
        SecurityContext sc = mc.getSecurityContext();
        if (sc == null || sc.getUserPrincipal() == null) {
            throw ExceptionUtils.toNotAuthorizedException(null,  null); 
        }
        if (userRole != null && !sc.isUserInRole(userRole)) {
            throw ExceptionUtils.toForbiddenException(null,  null); 
        }
    }
    private void checkCSRFToken(String csrfToken) {
        // CSRF
        HttpServletRequest httpRequest = mc.getHttpServletRequest();
        String savedToken = CSRFUtils.getCSRFToken(httpRequest, false);
        if (StringUtils.isEmpty(csrfToken) || StringUtils.isEmpty(savedToken)
            || !savedToken.equals(csrfToken)) {
            throwInvalidRegistrationException(""Invalid CSRF Token"");
        }
    }

    private void throwInvalidRegistrationException(String error) {
        throw new InvalidRegistrationException(error);
    }

    private boolean isValidURI(String uri, boolean requireHttps) {

        UrlValidator urlValidator = null;

        if (requireHttps) {
            String[] schemes = {""https""};
            urlValidator = new UrlValidator(schemes, UrlValidator.ALLOW_LOCAL_URLS);
        } else {
            urlValidator = new UrlValidator(UrlValidator.ALLOW_LOCAL_URLS
                                                     + UrlValidator.ALLOW_ALL_SCHEMES);
        }

        if (!urlValidator.isValid(uri)) {
            return false;
        }

        // Do additional checks on the URI
        try {
            URI parsedURI = new URI(uri);
            // The URI can't have a fragment according to the OAuth 2.0 spec (+ audience spec)
            if (parsedURI.getFragment() != null) {
                return false;
            }
        } catch (URISyntaxException ex) {
            return false;
        }

        return true;
    }

    protected String generateClientId() {
        return Base64UrlUtility.encode(CryptoUtils.generateSecureRandomBytes(10));
    }

    protected String generateClientSecret() {
        // TODO: may need to be 384/8 or 512/8 if not a default HS256 but HS384 or HS512
        int keySizeOctets = protectIdTokenWithClientSecret
            ? 32
            : 16;
        return Base64UrlUtility.encode(CryptoUtils.generateSecureRandomBytes(keySizeOctets));
    }

    protected RegisteredClients registerNewClient(Client newClient) {
        String userName = newClient.getResourceOwnerSubject().getLogin();
        Set<String> names = clientNames.get(userName);
        if (names == null) {
            names = new HashSet<>();
            clientNames.put(userName, names);
        } else if (names.contains(newClient.getApplicationName())) {
            String newName = newClient.getApplicationName();
            SortedSet<Integer> numbers = new TreeSet<Integer>();
            for (String name : names) {
                if (name.startsWith(newName) && !name.equals(newName)) {
                    try {
                        numbers.add(Integer.valueOf(name.substring(newName.length())));
                    } catch (Exception ex) {
                        // can be characters, continue;
                    }
                }
            }
            int nextNumber = numbers.isEmpty() ? 2 : numbers.last() + 1;
            newClient.setApplicationName(newName + nextNumber);
        }
        names.add(newClient.getApplicationName());

        clientProvider.setClient(newClient);
        Collection<Client> clientRegistrations = getClientRegistrations();
        clientRegistrations.add(newClient);
        return new RegisteredClients(clientRegistrations);
    }

    protected Collection<Client> getClientRegistrations() {
        String userName = getUserName();
        return getClientRegistrations(userName);
    }

    protected Collection<Client> getClientRegistrations(String userName) {
        Collection<Client> userClientRegs = registrations.get(userName);
        if (userClientRegs == null) {
            userClientRegs = new TreeSet<Client>(new ClientComparator());
            registrations.put(userName, userClientRegs);
        }
        return userClientRegs;
    }

    private String getUserName() {
        SecurityContext sc = mc.getSecurityContext();
        if (sc == null || sc.getUserPrincipal() == null) {
            return null;
        }
        return sc.getUserPrincipal().getName();
    }

    public void setHomeRealms(Map<String, String> homeRealms) {
        this.homeRealms = homeRealms;
    }

    public void init() {
        for (Client c : clientProvider.getClients(null)) {
            if (c.getResourceOwnerSubject() != null) {
                String userName = c.getResourceOwnerSubject().getLogin();
                getClientRegistrations(userName).add(c);
                Set<String> names = clientNames.get(userName);
                if (names == null) {
                    names = new HashSet<>();
                    clientNames.put(userName, names);
                }
                names.add(c.getApplicationName());
            }
        }
    }

    public void setProtectIdTokenWithClientSecret(boolean protectIdTokenWithClientSecret) {
        this.protectIdTokenWithClientSecret = protectIdTokenWithClientSecret;
    }

    public void setClientScopes(Map<String, String> clientScopes) {
        this.clientScopes = clientScopes;
    }

    public OAuthDataProvider getDataProvider() {
        return dataProvider;
    }

    public void setDataProvider(OAuthDataProvider dataProvider) {
        this.dataProvider = dataProvider;
    }

    public void setClientProvider(ClientRegistrationProvider clientProvider) {
        this.clientProvider = clientProvider;
    }

    public void setAdditionalTLDs(List<String> additionalTLDs) {
        // Support additional top level domains
        if (additionalTLDs != null && !additionalTLDs.isEmpty()) {
            try {
                String[] tldsToAddArray = additionalTLDs.toArray(new String[additionalTLDs.size()]);
                LOG.info(""Adding the following additional Top Level Domains: "" + Arrays.toString(tldsToAddArray));
                DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, tldsToAddArray);
            } catch (IllegalStateException ex) {
                //
            }
        }
    }

    public void setUserRole(String userRole) {
        this.userRole = userRole;
    }

    private static class ClientComparator implements Comparator<Client> {

        @Override
        public int compare(Client c1, Client c2) {
            // or the registration date comparison - this can be driven from UI
            // example, Sort Clients By Name/Date/etc
            return c1.getApplicationName().compareTo(c2.getApplicationName());
        }

    }
    private static class TokenComparator implements Comparator<ServerAccessToken> {

        @Override
        public int compare(ServerAccessToken t1, ServerAccessToken t2) {
            return Long.compare(t1.getIssuedAt(), t2.getIssuedAt());
        }

    }
    private static class CodeGrantComparator implements Comparator<ServerAuthorizationCodeGrant> {

        @Override
        public int compare(ServerAuthorizationCodeGrant g1, ServerAuthorizationCodeGrant g2) {
            return Long.compare(g1.getIssuedAt(), g2.getIssuedAt());
        }

    }
}
"
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[130,150]:removeClient","    public RegisteredClients removeClient(@PathParam(""id"") String id,
                                          @FormParam(""client_csrfToken"") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);
        checkSecurityContext();
        
        Collection<Client> clients = getClientRegistrations();
        for (Iterator<Client> it = clients.iterator(); it.hasNext();) {
            Client c = it.next();
            if (c.getClientId().equals(id)) {
                clientProvider.removeClient(id);
                it.remove();
                Set<String> names = clientNames.get(getUserName());
                if (names != null) {
                    names.remove(c.getApplicationName());
                }
                break;
            }
        }
        return new RegisteredClients(clients);
    }
"
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[155,167]:resetClient","    public Client resetClient(@PathParam(""id"") String id,
                              @FormParam(""client_csrfToken"") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);
        checkSecurityContext();

        Client c = getRegisteredClient(id);
        if (c.isConfidential()) {
            c.setClientSecret(generateClientSecret());
        }
        clientProvider.setClient(c);
        return c;
    }
"
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[193,198]:revokeClientAccessToken","    public ClientTokens revokeClientAccessToken(@PathParam(""id"") String clientId,
                                                      @PathParam(""tokenId"") String tokenId,
                                                      @FormParam(""client_csrfToken"") String csrfToken) {
        
        return doRevokeClientToken(clientId, csrfToken, tokenId, OAuthConstants.ACCESS_TOKEN);
    }
"
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[204,208]:revokeClientRefreshToken","    public ClientTokens revokeClientRefreshToken(@PathParam(""id"") String clientId,
                                                      @PathParam(""tokenId"") String tokenId,
                                                      @FormParam(""client_csrfToken"") String csrfToken) {
        return doRevokeClientToken(clientId, csrfToken, tokenId, OAuthConstants.REFRESH_TOKEN);
    }
"
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[243,255]:revokeClientCodeGrant","    public ClientCodeGrants revokeClientCodeGrant(@PathParam(""id"") String id,
                                                  @PathParam(""code"") String code,
                                                  @FormParam(""client_csrfToken"") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);
        checkSecurityContext();

        if (dataProvider instanceof AuthorizationCodeDataProvider) {
            ((AuthorizationCodeDataProvider)dataProvider).removeCodeGrant(code);
            return getClientCodeGrants(id);
        }
        return null;
    }
"
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[261,361]:registerForm","    public Response registerForm(@FormParam(""client_name"") String appName,
                                 @FormParam(""client_type"") String appType,
                                 @FormParam(""client_audience"") String audience,
                                 @FormParam(""client_redirectURI"") String redirectURI,
                                 @FormParam(""client_logoutURI"") String logoutURI,
                                 @FormParam(""client_homeRealm"") String homeRealm,
                                 @FormParam(""client_csrfToken"") String csrfToken
    ) {
        try {
            // CSRF
            checkCSRFToken(csrfToken);
            checkSecurityContext();

            // Client Name
            if (StringUtils.isEmpty(appName)) {
                throwInvalidRegistrationException(""The client name must not be empty"");
            }
            // Client Type
            if (StringUtils.isEmpty(appType)) {
                throwInvalidRegistrationException(""The client type must not be empty"");
            }
            if (!(""confidential"".equals(appType) || ""public"".equals(appType))) {
                throwInvalidRegistrationException(""An invalid client type was specified: "" + appType);
            }
            // Client ID
            String clientId = generateClientId();
            boolean isConfidential = ""confidential"".equals(appType);
            // Client Secret
            String clientSecret = isConfidential
                ? generateClientSecret()
                : null;

            Client newClient = new Client(clientId, clientSecret, isConfidential, appName);

            // User who registered this client
            String userName = getUserName();
            UserSubject userSubject = new OidcUserSubject(userName);
            newClient.setResourceOwnerSubject(userSubject);

            // Client Registration Time
            newClient.setRegisteredAt(System.currentTimeMillis() / 1000);

            // Client Realm
            if (homeRealm != null) {
                newClient.setHomeRealm(homeRealm);
                if (homeRealms.containsKey(homeRealm)) {
                    newClient.getProperties().put(""homeRealmAlias"", homeRealms.get(homeRealm));
                }
            }

            // Client Redirect URIs
            if (!StringUtils.isEmpty(redirectURI)) {
                String[] allUris = redirectURI.trim().split("" "");
                List<String> redirectUris = new LinkedList<String>();
                for (String uri : allUris) {
                    if (!StringUtils.isEmpty(uri)) {
                        if (!isValidURI(uri, false)) {
                            throwInvalidRegistrationException(""An invalid redirect URI was specified: "" + uri);
                        }
                        redirectUris.add(uri);
                    }
                }
                newClient.setRedirectUris(redirectUris);
            }
            // Client Logout URI
            if (!StringUtils.isEmpty(logoutURI)) {
                String[] logoutUris = logoutURI.split("" "");
                for (String uri : logoutUris) {
                    if (!isValidURI(uri, false)) {
                        throwInvalidRegistrationException(""An invalid logout URI was specified: "" + uri);
                    }
                }
                //TODO: replace this code with newClient.setLogoutUri() once it becomes available
                newClient.getProperties().put(""post_logout_redirect_uris"", logoutURI);
            }

            // Client Audience URIs
            if (!StringUtils.isEmpty(audience)) {
                String[] auds = audience.trim().split("" "");
                List<String> registeredAuds = new LinkedList<String>();
                for (String aud : auds) {
                    if (!StringUtils.isEmpty(aud)) {
                        if (!isValidURI(aud, true)) {
                            throwInvalidRegistrationException(""An invalid audience URI was specified: "" + aud);
                        }
                        registeredAuds.add(aud);
                    }
                }
                newClient.setRegisteredAudiences(registeredAuds);
            }

            // Client Scopes
            if (clientScopes != null && !clientScopes.isEmpty()) {
                newClient.setRegisteredScopes(new ArrayList<String>(clientScopes.keySet()));
            }
            return Response.ok(registerNewClient(newClient)).build();
        } catch (InvalidRegistrationException ex) {
            // For the view handlers to handle it
            return Response.ok(new InvalidRegistration(ex.getMessage())).build();
        }
    }
"
"services/oidc/src/main/java/org/apache/cxf/fediz/service/oidc/clients/ClientRegistrationService.java:[386,414]:isValidURI","    private boolean isValidURI(String uri, boolean requireHttps) {

        UrlValidator urlValidator = null;

        if (requireHttps) {
            String[] schemes = {""https""};
            urlValidator = new UrlValidator(schemes, UrlValidator.ALLOW_LOCAL_URLS);
        } else {
            urlValidator = new UrlValidator(UrlValidator.ALLOW_LOCAL_URLS
                                                     + UrlValidator.ALLOW_ALL_SCHEMES);
        }

        if (!urlValidator.isValid(uri)) {
            return false;
        }

        // Do additional checks on the URI
        try {
            URI parsedURI = new URI(uri);
            // The URI can't have a fragment according to the OAuth 2.0 spec (+ audience spec)
            if (parsedURI.getFragment() != null) {
                return false;
            }
        } catch (URISyntaxException ex) {
            return false;
        }

        return true;
    }
"
"systests/oidc/src/test/java/org/apache/cxf/fediz/systests/oidc/OIDCTest.java:[81,967]:OIDCTest","public class OIDCTest {

    static String idpHttpsPort;
    static String rpHttpsPort;

    private static Tomcat idpServer;
    private static Tomcat rpServer;

    private static String storedClientId;
    private static String storedClient2Id;

    @BeforeClass
    public static void init() throws Exception {
        System.setProperty(""org.apache.commons.logging.Log"", ""org.apache.commons.logging.impl.SimpleLog"");
        System.setProperty(""org.apache.commons.logging.simplelog.showdatetime"", ""true"");
        System.setProperty(""org.apache.commons.logging.simplelog.log.httpclient.wire"", ""info"");
        System.setProperty(""org.apache.commons.logging.simplelog.log.org.apache.commons.httpclient"", ""info"");
        System.setProperty(""org.apache.commons.logging.simplelog.log.org.springframework.webflow"", ""info"");
        System.setProperty(""org.apache.commons.logging.simplelog.log.org.springframework.security.web"", ""info"");
        System.setProperty(""org.apache.commons.logging.simplelog.log.org.apache.cxf.fediz"", ""info"");
        System.setProperty(""org.apache.commons.logging.simplelog.log.org.apache.cxf"", ""info"");

        idpHttpsPort = System.getProperty(""idp.https.port"");
        Assert.assertNotNull(""Property 'idp.https.port' null"", idpHttpsPort);
        rpHttpsPort = System.getProperty(""rp.https.port"");
        Assert.assertNotNull(""Property 'rp.https.port' null"", rpHttpsPort);

        idpServer = startServer(true, idpHttpsPort);
        rpServer = startServer(false, rpHttpsPort);

        loginToClientsPage(rpHttpsPort, idpHttpsPort);
    }

    private static Tomcat startServer(boolean idp, String port)
        throws ServletException, LifecycleException, IOException {
        Tomcat server = new Tomcat();
        server.setPort(0);
        String currentDir = new File(""."").getCanonicalPath();
        String baseDir = currentDir + File.separator + ""target"";
        server.setBaseDir(baseDir);

        if (idp) {
            server.getHost().setAppBase(""tomcat/idp/webapps"");
        } else {
            server.getHost().setAppBase(""tomcat/rp/webapps"");
        }
        server.getHost().setAutoDeploy(true);
        server.getHost().setDeployOnStartup(true);

        Connector httpsConnector = new Connector();
        httpsConnector.setPort(Integer.parseInt(port));
        httpsConnector.setSecure(true);
        httpsConnector.setScheme(""https"");
        //httpsConnector.setAttribute(""keyAlias"", keyAlias);
        httpsConnector.setAttribute(""keystorePass"", ""tompass"");
        httpsConnector.setAttribute(""keystoreFile"", ""test-classes/server.jks"");
        httpsConnector.setAttribute(""truststorePass"", ""tompass"");
        httpsConnector.setAttribute(""truststoreFile"", ""test-classes/server.jks"");
        httpsConnector.setAttribute(""clientAuth"", ""want"");
        // httpsConnector.setAttribute(""clientAuth"", ""false"");
        httpsConnector.setAttribute(""sslProtocol"", ""TLS"");
        httpsConnector.setAttribute(""SSLEnabled"", true);

        server.getService().addConnector(httpsConnector);

        if (idp) {
            File stsWebapp = new File(baseDir + File.separator + server.getHost().getAppBase(), ""fediz-idp-sts"");
            server.addWebapp(""/fediz-idp-sts"", stsWebapp.getAbsolutePath());

            File idpWebapp = new File(baseDir + File.separator + server.getHost().getAppBase(), ""fediz-idp"");
            server.addWebapp(""/fediz-idp"", idpWebapp.getAbsolutePath());
        } else {
            File rpWebapp = new File(baseDir + File.separator + server.getHost().getAppBase(), ""fediz-oidc"");
            Context cxt = server.addWebapp(""/fediz-oidc"", rpWebapp.getAbsolutePath());

            // Substitute the IDP port. Necessary if running the test in eclipse where port filtering doesn't seem
            // to work
            File f = new File(currentDir + ""/src/test/resources/fediz_config.xml"");
            FileInputStream inputStream = new FileInputStream(f);
            String content = IOUtils.toString(inputStream, ""UTF-8"");
            inputStream.close();
            if (content.contains(""idp.https.port"")) {
                content = content.replaceAll(""\\$\\{idp.https.port\\}"", """" + idpHttpsPort);

                File f2 = new File(baseDir + ""/test-classes/fediz_config.xml"");
                try (FileOutputStream outputStream = new FileOutputStream(f2)) {
                    IOUtils.write(content, outputStream, ""UTF-8"");
                }
            }

            FederationAuthenticator fa = new FederationAuthenticator();
            fa.setConfigFile(currentDir + File.separator + ""target"" + File.separator
                             + ""test-classes"" + File.separator + ""fediz_config.xml"");
            cxt.getPipeline().addValve(fa);
        }

        server.start();

        return server;
    }

    @AfterClass
    public static void cleanup() throws Exception {
        try {
            loginToClientsPageAndDeleteClient(rpHttpsPort, idpHttpsPort);
        } finally {
            shutdownServer(idpServer);
            shutdownServer(rpServer);
        }
    }

    private static void shutdownServer(Tomcat server) {
        try {
            if (server != null && server.getServer() != null
                && server.getServer().getState() != LifecycleState.DESTROYED) {
                if (server.getServer().getState() != LifecycleState.STOPPED) {
                    server.stop();
                }
                server.destroy();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String getIdpHttpsPort() {
        return idpHttpsPort;
    }

    public String getRpHttpsPort() {
        return rpHttpsPort;
    }

    public String getServletContextName() {
        return ""fedizhelloworld"";
    }

    // Runs as BeforeClass: Login to the OIDC Clients page + create two new clients
    private static void loginToClientsPage(String rpPort, String idpPort) throws Exception {
        String url = ""https://localhost:"" + rpPort + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, idpPort);
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Now try to register a new client
        HtmlPage registeredClientPage =
            registerNewClient(webClient, url, ""new-client"", ""https://127.0.0.1"",
                              ""https://cxf.apache.org"", ""https://localhost:12345"");
        String registeredClientPageBody = registeredClientPage.getBody().getTextContent();
        Assert.assertTrue(registeredClientPageBody.contains(""Registered Clients""));
        Assert.assertTrue(registeredClientPageBody.contains(""new-client""));
        Assert.assertTrue(registeredClientPageBody.contains(""https://127.0.0.1""));

        HtmlTable table = registeredClientPage.getHtmlElementById(""registered_clients"");
        storedClientId = table.getCellAt(1, 1).asText().trim();
        Assert.assertNotNull(storedClientId);

        // Try to register another new client
        registeredClientPage =
            registerNewClient(webClient, url, ""new-client2"", ""https://127.0.1.1"",
                              ""https://ws.apache.org"", ""https://localhost:12345"");
        registeredClientPageBody = registeredClientPage.getBody().getTextContent();
        Assert.assertTrue(registeredClientPageBody.contains(""Registered Clients""));
        Assert.assertTrue(registeredClientPageBody.contains(""new-client""));
        Assert.assertTrue(registeredClientPageBody.contains(""https://127.0.0.1""));
        Assert.assertTrue(registeredClientPageBody.contains(""new-client2""));
        Assert.assertTrue(registeredClientPageBody.contains(""https://127.0.1.1""));

        table = registeredClientPage.getHtmlElementById(""registered_clients"");
        storedClient2Id = table.getCellAt(2, 1).asText().trim();
        if (storedClient2Id.equals(storedClientId)) {
            storedClient2Id = table.getCellAt(1, 1).asText().trim();
        }
        Assert.assertNotNull(storedClient2Id);

        webClient.close();
    }

    private static HtmlPage registerNewClient(WebClient webClient, String url,
                                            String clientName, String redirectURI,
                                            String clientAudience,
                                            String logoutURI) throws Exception {
        HtmlPage registerPage = webClient.getPage(url + ""/register"");

        final HtmlForm form = registerPage.getForms().get(0);

        // Set new client values
        final HtmlTextInput clientNameInput = form.getInputByName(""client_name"");
        clientNameInput.setValueAttribute(clientName);
        final HtmlSelect clientTypeSelect = form.getSelectByName(""client_type"");
        clientTypeSelect.setSelectedAttribute(""confidential"", true);
        final HtmlTextInput redirectURIInput = form.getInputByName(""client_redirectURI"");
        redirectURIInput.setValueAttribute(redirectURI);
        final HtmlTextInput clientAudienceURIInput = form.getInputByName(""client_audience"");
        clientAudienceURIInput.setValueAttribute(clientAudience);
        final HtmlTextInput clientLogoutURI = form.getInputByName(""client_logoutURI"");
        clientLogoutURI.setValueAttribute(logoutURI);

        final HtmlButton button = form.getButtonByName(""submit_button"");
        return button.click();
    }

    // Runs as AfterClass: Login to the OIDC Clients page + delete the created clients!
    private static void loginToClientsPageAndDeleteClient(String rpPort, String idpPort) throws Exception {
        String url = ""https://localhost:"" + rpPort + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, idpPort);
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Get the client identifier
        HtmlTable table = loginPage.getHtmlElementById(""registered_clients"");
        String clientId = table.getCellAt(1, 1).asText().trim();
        Assert.assertNotNull(clientId);
        String clientId2 = table.getCellAt(2, 1).asText().trim();
        Assert.assertNotNull(clientId2);

        // Now go to the specific client page
        HtmlPage registeredClientsPage = deleteClient(webClient, url, clientId);

        // Check we have one more registered clients
        table = registeredClientsPage.getHtmlElementById(""registered_clients"");
        Assert.assertEquals(2, table.getRowCount());

        // Now delete the other client
        registeredClientsPage = deleteClient(webClient, url, clientId2);

        // Check we have no more registered clients
        table = registeredClientsPage.getHtmlElementById(""registered_clients"");
        Assert.assertEquals(1, table.getRowCount());

        webClient.close();
    }

    private static HtmlPage deleteClient(WebClient webClient, String url, String clientId) throws Exception {
        HtmlPage clientPage = webClient.getPage(url + ""/"" + clientId);

        final HtmlForm deleteForm = clientPage.getFormByName(""deleteForm"");
        Assert.assertNotNull(deleteForm);

        // Delete the client
        final HtmlButton button = deleteForm.getButtonByName(""submit_delete_button"");
        return button.click();
    }

    // Test that we managed to create the clients ok
    @org.junit.Test
    public void testCreatedClients() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Get the new client identifier
        HtmlTable table = loginPage.getHtmlElementById(""registered_clients"");

        // 2 clients
        Assert.assertEquals(table.getRows().size(), 3);

        // Now check the first client
        String clientId = table.getCellAt(1, 1).asText().trim();
        Assert.assertNotNull(clientId);

        // Check the Date
        String date = table.getCellAt(1, 2).asText().trim();
        SimpleDateFormat dateFormat = new SimpleDateFormat(""dd MMM yyyy"", Locale.US);
        dateFormat.setTimeZone(TimeZone.getTimeZone(""GMT""));
        Assert.assertEquals(dateFormat.format(new Date()), date);

        // Check the redirect URI
        String redirectURI = table.getCellAt(1, 3).asText().trim();
        Assert.assertTrue(""https://127.0.0.1"".equals(redirectURI)
                          || ""https://127.0.1.1"".equals(redirectURI));

        // Now check the specific client page
        HtmlPage clientPage = webClient.getPage(url + ""/"" + clientId);
        HtmlTable clientTable = clientPage.getHtmlElementById(""client"");
        Assert.assertEquals(clientId, clientTable.getCellAt(1, 0).asText().trim());

        webClient.close();
    }

    // Test that ""bob"" can't see the clients created by ""alice""
    @org.junit.Test
    public void testRegisteredClientsAsBob() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""bob"";
        String password = ""bob"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Get the new client identifier
        HtmlTable table = loginPage.getHtmlElementById(""registered_clients"");

        // 2 clients
        Assert.assertEquals(table.getRows().size(), 1);

        webClient.close();
    }

    @org.junit.Test
    public void testOIDCLoginForClient1() throws Exception {

        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/authorize?"";
        url += ""client_id="" + storedClientId;
        url += ""&response_type=code"";
        url += ""&scope=openid"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the OIDC token endpoint + get the authorization code
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        String authorizationCode = loginAndGetAuthorizationCode(url, webClient);
        Assert.assertNotNull(authorizationCode);

        // Now use the code to get an IdToken

        url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/oauth2/token"";
        WebRequest request = new WebRequest(new URL(url), HttpMethod.POST);

        request.setRequestParameters(new ArrayList<NameValuePair>());
        request.getRequestParameters().add(new NameValuePair(""client_id"", storedClientId));
        request.getRequestParameters().add(new NameValuePair(""grant_type"", ""authorization_code""));
        request.getRequestParameters().add(new NameValuePair(""code"", authorizationCode));

        webClient.getOptions().setJavaScriptEnabled(false);
        final UnexpectedPage responsePage = webClient.getPage(request);
        String response = responsePage.getWebResponse().getContentAsString();

        // Check the IdToken
        String idToken = getIdToken(response);
        Assert.assertNotNull(idToken);
        validateIdToken(idToken, storedClientId);

        webClient.close();
    }

    @org.junit.Test
    public void testOIDCLoginForClient2() throws Exception {

        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/authorize?"";
        url += ""client_id="" + storedClient2Id;
        url += ""&response_type=code"";
        url += ""&scope=openid"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the OIDC token endpoint + get the authorization code
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        String authorizationCode = loginAndGetAuthorizationCode(url, webClient);
        Assert.assertNotNull(authorizationCode);

        // Now use the code to get an IdToken

        url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/oauth2/token"";
        WebRequest request = new WebRequest(new URL(url), HttpMethod.POST);

        request.setRequestParameters(new ArrayList<NameValuePair>());
        request.getRequestParameters().add(new NameValuePair(""client_id"", storedClient2Id));
        request.getRequestParameters().add(new NameValuePair(""grant_type"", ""authorization_code""));
        request.getRequestParameters().add(new NameValuePair(""code"", authorizationCode));

        webClient.getOptions().setJavaScriptEnabled(false);
        final UnexpectedPage responsePage = webClient.getPage(request);
        String response = responsePage.getWebResponse().getContentAsString();

        // Check the IdToken
        String idToken = getIdToken(response);
        Assert.assertNotNull(idToken);
        validateIdToken(idToken, storedClient2Id);

        webClient.close();
    }

    @org.junit.Test
    public void testUsingCodeForOtherClient() throws Exception {
        // Get the code for the first client
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/authorize?"";
        url += ""client_id="" + storedClientId;
        url += ""&response_type=code"";
        url += ""&scope=openid"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the OIDC token endpoint + get the authorization code
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        String authorizationCode = loginAndGetAuthorizationCode(url, webClient);
        Assert.assertNotNull(authorizationCode);

        // Now try and get a token for the second client
        url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/oauth2/token"";
        WebRequest request = new WebRequest(new URL(url), HttpMethod.POST);

        request.setRequestParameters(new ArrayList<NameValuePair>());
        request.getRequestParameters().add(new NameValuePair(""client_id"", storedClient2Id));
        request.getRequestParameters().add(new NameValuePair(""grant_type"", ""authorization_code""));
        request.getRequestParameters().add(new NameValuePair(""code"", authorizationCode));

        webClient.getOptions().setJavaScriptEnabled(false);
        try {
            webClient.getPage(request);
            Assert.fail();
        } catch (FailingHttpStatusCodeException ex) {
            // expected
        }
    }

    @org.junit.Test
    public void testBadClientId() throws Exception {

        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/authorize?"";
        url += ""client_id="" + storedClientId + 2;
        url += ""&response_type=code"";
        url += ""&scope=openid"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the OIDC token endpoint + get the authorization code
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());

        String authorizationCode = loginAndGetAuthorizationCode(url, webClient);
        Assert.assertNull(authorizationCode);

        webClient.close();
    }

    @org.junit.Test
    public void testEmptyClientId() throws Exception {

        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/authorize?"";
        url += ""client_id="";
        url += ""&response_type=code"";
        url += ""&scope=openid"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the OIDC token endpoint + get the authorization code
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());

        String authorizationCode = loginAndGetAuthorizationCode(url, webClient);
        Assert.assertNull(authorizationCode);

        webClient.close();
    }

    @org.junit.Test
    public void testIncorrectRedirectURI() throws Exception {

        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/authorize?"";
        url += ""client_id="" + storedClientId;
        url += ""&response_type=code"";
        url += ""&scope=openid"";
        url += ""&redirect_uri=https://127.0.0.5"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the OIDC token endpoint + get the authorization code
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());

        String authorizationCode = loginAndGetAuthorizationCode(url, webClient);
        Assert.assertNull(authorizationCode);

        webClient.close();
    }

    @org.junit.Test
    public void testCreateClientWithInvalidRegistrationURI() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Now try to register a new client
        try {
            HtmlPage errorPage = registerNewClient(webClient, url, ""asfxyz"", ""https://127.0.0.1//"",
                              ""https://cxf.apache.org"", ""https://localhost:12345"");
            Assert.assertTrue(errorPage.asText().contains(""Invalid Client Registration""));
        } catch (Exception ex) {
            // expected
        }

        webClient.close();
    }

    @org.junit.Test
    public void testCreateClientWithRegistrationURIFragment() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Now try to register a new client
        try {
            HtmlPage errorPage = registerNewClient(webClient, url, ""asfxyz"", ""https://127.0.0.1#fragment"",
                              ""https://cxf.apache.org"", ""https://localhost:12345"");
            Assert.assertTrue(errorPage.asText().contains(""Invalid Client Registration""));
        } catch (Exception ex) {
            // expected
        }

        webClient.close();
    }

    @org.junit.Test
    public void testCreateClientWithInvalidAudienceURI() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Now try to register a new client
        try {
            HtmlPage errorPage = registerNewClient(webClient, url, ""asfxyz"", ""https://127.0.0.1/"",
                              ""https://cxf.apache.org//"", ""https://localhost:12345"");
            Assert.assertTrue(errorPage.asText().contains(""Invalid Client Registration""));
        } catch (Exception ex) {
            // expected
        }

        webClient.close();
    }

    @org.junit.Test
    public void testCreateClientWithInvalidLogoutURI() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Now try to register a new client
        try {
            HtmlPage errorPage = registerNewClient(webClient, url, ""asfxyz"", ""https://127.0.0.1/"",
                              ""https://cxf.apache.org/"", ""https://localhost:12345//"");
            Assert.assertTrue(errorPage.asText().contains(""Invalid Client Registration""));
        } catch (Exception ex) {
            // expected
        }

        webClient.close();
    }

    @org.junit.Test
    public void testCreateClientWithAudienceURIFragment() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Now try to register a new client
        try {
            HtmlPage errorPage = registerNewClient(webClient, url, ""asfxyz"", ""https://127.0.0.1"",
                              ""https://cxf.apache.org#fragment"", ""https://localhost:12345"");
            Assert.assertTrue(errorPage.asText().contains(""Invalid Client Registration""));
        } catch (Exception ex) {
            // expected
        }

        webClient.close();
    }

    @org.junit.Test
    public void testClientCredentialsSTS() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/oauth2/token"";
        WebRequest request = new WebRequest(new URL(url), HttpMethod.POST);

        request.setRequestParameters(new ArrayList<NameValuePair>());
        request.getRequestParameters().add(new NameValuePair(""client_id"", ""alice""));
        request.getRequestParameters().add(new NameValuePair(""client_secret"", ""ecila""));
        request.getRequestParameters().add(new NameValuePair(""grant_type"", ""client_credentials""));

        final WebClient webClient = new WebClient();
        webClient.getOptions().setUseInsecureSSL(true);
        webClient.getOptions().setJavaScriptEnabled(false);
        final UnexpectedPage responsePage = webClient.getPage(request);
        String response = responsePage.getWebResponse().getContentAsString();

        Assert.assertTrue(response.contains(""access_token""));

        webClient.close();
    }

    @org.junit.Test
    public void testCreateClientWithSupportedTLD() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Register a client with a supported TLD
        HtmlPage registeredClientPage = registerNewClient(webClient, url, ""tld1"", ""https://www.apache.corp"",
            ""https://cxf.apache.org"", ""https://localhost:12345"");
        String registeredClientPageBody = registeredClientPage.getBody().getTextContent();
        Assert.assertTrue(registeredClientPageBody.contains(""Registered Clients""));
        Assert.assertTrue(registeredClientPageBody.contains(""tld1""));
        Assert.assertTrue(registeredClientPageBody.contains(""https://www.apache.corp""));

        HtmlTable table = registeredClientPage.getHtmlElementById(""registered_clients"");
        String clientId = table.getCellAt(3, 1).asText().trim();

        // Register a client with an unsupported TLD
        try {
            HtmlPage errorPage = registerNewClient(webClient, url, ""tld2"", ""https://www.apache.corp2"",
                                                   ""https://cxf.apache.org"", ""https://localhost:12345"");
            Assert.assertTrue(errorPage.asText().contains(""Invalid Client Registration""));
        } catch (Exception ex) {
            // expected
        }

        // Delete the first client above
        deleteClient(webClient, url, clientId);


        webClient.close();
    }

    @org.junit.Test
    public void testLogout() throws Exception {
        // 1. Log in
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/authorize?"";
        url += ""client_id="" + storedClientId;
        url += ""&response_type=code"";
        url += ""&scope=openid"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the OIDC token endpoint + get the authorization code
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        String authorizationCode = loginAndGetAuthorizationCode(url, webClient);
        Assert.assertNotNull(authorizationCode);

        // 2. Get another authorization code without username/password. This should work as we are
        // logged on
        webClient.getCredentialsProvider().clear();
        CodeWebConnectionWrapper wrapper = new CodeWebConnectionWrapper(webClient);

        try {
            webClient.getPage(url);
        } catch (Throwable t) {
            // expected
        }

        wrapper.close();
        authorizationCode = wrapper.getCode();
        Assert.assertNotNull(authorizationCode);

        // 3. Log out
        String logoutUrl = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/idp/logout?"";
        logoutUrl += ""client_id="" + storedClientId;

        webClient.getOptions().setJavaScriptEnabled(false);
        try {
            webClient.getPage(logoutUrl);
        } catch (Exception ex) {
            Assert.assertTrue(ex.getMessage().contains(""Connect to localhost:12345""));
        }

        // 4. Get another authorization code without username/password. This should fail as we have
        // logged out
        try {
            loginAndGetAuthorizationCode(url, webClient);
            Assert.fail(""Failure expected after logout"");
        } catch (Exception ex) {
            Assert.assertTrue(ex.getMessage().contains(""401""));
        }

        webClient.close();
    }

    // Test that the form has the correct CSRF token in it when creating a client
    @org.junit.Test
    public void testCSRFClientRegistration() throws Exception {
        String url = ""https://localhost:"" + getRpHttpsPort() + ""/fediz-oidc/console/clients"";
        String user = ""alice"";
        String password = ""ecila"";

        // Login to the client page successfully
        WebClient webClient = setupWebClient(user, password, getIdpHttpsPort());
        HtmlPage loginPage = login(url, webClient);
        final String bodyTextContent = loginPage.getBody().getTextContent();
        Assert.assertTrue(bodyTextContent.contains(""Registered Clients""));

        // Register a new client

        WebRequest request = new WebRequest(new URL(url), HttpMethod.POST);
        request.setRequestParameters(new ArrayList<NameValuePair>());

        request.getRequestParameters().add(new NameValuePair(""client_name"", ""bad_client""));
        request.getRequestParameters().add(new NameValuePair(""client_type"", ""confidential""));
        request.getRequestParameters().add(new NameValuePair(""client_redirectURI"", ""https://127.0.0.1""));
        request.getRequestParameters().add(new NameValuePair(""client_audience"", """"));
        request.getRequestParameters().add(new NameValuePair(""client_logoutURI"", """"));
        request.getRequestParameters().add(new NameValuePair(""client_homeRealm"", """"));
        request.getRequestParameters().add(new NameValuePair(""client_csrfToken"", ""12345""));

        HtmlPage registeredClientPage = webClient.getPage(request);
        Assert.assertTrue(registeredClientPage.asXml().contains(""Invalid CSRF Token""));

        webClient.close();
    }

    private static WebClient setupWebClient(String user, String password, String idpPort) {
        final WebClient webClient = new WebClient();
        webClient.getOptions().setUseInsecureSSL(true);
        webClient.getCredentialsProvider().setCredentials(
            new AuthScope(""localhost"", Integer.parseInt(idpPort)),
            new UsernamePasswordCredentials(user, password));

        webClient.getOptions().setJavaScriptEnabled(false);

        return webClient;
    }

    private static HtmlPage login(String url, WebClient webClient) throws IOException {
        webClient.getOptions().setJavaScriptEnabled(false);
        final HtmlPage idpPage = webClient.getPage(url);
        webClient.getOptions().setJavaScriptEnabled(true);
        Assert.assertEquals(""IDP SignIn Response Form"", idpPage.getTitleText());

        // Test the SAML Version here
        DomNodeList<DomElement> results = idpPage.getElementsByTagName(""input"");

        String wresult = null;
        for (DomElement result : results) {
            if (""wresult"".equals(result.getAttributeNS(null, ""name""))) {
                wresult = result.getAttributeNS(null, ""value"");
                break;
            }
        }
        Assert.assertTrue(wresult != null
            && wresult.contains(""urn:oasis:names:tc:SAML:2.0:cm:bearer""));

        final HtmlForm form = idpPage.getFormByName(""signinresponseform"");
        final HtmlSubmitInput button = form.getInputByName(""_eventId_submit"");

        return button.click();
    }

    private static String loginAndGetAuthorizationCode(
        String url, WebClient webClient
    ) throws Exception {
        webClient.getOptions().setJavaScriptEnabled(false);
        final HtmlPage idpPage = webClient.getPage(url);
        webClient.getOptions().setJavaScriptEnabled(true);
        Assert.assertEquals(""IDP SignIn Response Form"", idpPage.getTitleText());

        DomNodeList<DomElement> results = idpPage.getElementsByTagName(""input"");

        String wresult = null;
        for (DomElement result : results) {
            if (""wresult"".equals(result.getAttributeNS(null, ""name""))) {
                wresult = result.getAttributeNS(null, ""value"");
                break;
            }
        }
        Assert.assertTrue(wresult != null
            && wresult.contains(""urn:oasis:names:tc:SAML:2.0:cm:bearer""));

        final HtmlForm form = idpPage.getFormByName(""signinresponseform"");
        final HtmlSubmitInput button = form.getInputByName(""_eventId_submit"");

        // Bit of a hack here to get the authorization code - necessary as HtmlUnit tries
        // to follow the server redirect to ""https://127.0.0.1"" - the redirect URI
        CodeWebConnectionWrapper wrapper = new CodeWebConnectionWrapper(webClient);

        try {
            button.click();
        } catch (Throwable t) {
            // expected
        }

        wrapper.close();
        return wrapper.getCode();
    }

    private String getIdToken(String parentString) {
        String foundString =
            parentString.substring(parentString.indexOf(""id_token"")
                                   + (""id_token"" + ""\"":\"""").length());
        int ampersandIndex = foundString.indexOf('\""');
        if (ampersandIndex < 1) {
            ampersandIndex = foundString.length();
        }
        return foundString.substring(0, ampersandIndex);
    }

    private void validateIdToken(String idToken, String audience)
        throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        JwsJwtCompactConsumer jwtConsumer = new JwsJwtCompactConsumer(idToken);
        JwtToken jwt = jwtConsumer.getJwtToken();

        // Validate claims
        Assert.assertEquals(""alice"", jwt.getClaim(""preferred_username""));
        Assert.assertEquals(""accounts.fediz.com"", jwt.getClaim(JwtConstants.CLAIM_ISSUER));
        Assert.assertEquals(audience, jwt.getClaim(JwtConstants.CLAIM_AUDIENCE));
        Assert.assertNotNull(jwt.getClaim(JwtConstants.CLAIM_EXPIRY));
        Assert.assertNotNull(jwt.getClaim(JwtConstants.CLAIM_ISSUED_AT));

        KeyStore keystore = KeyStore.getInstance(""JKS"");
        keystore.load(Loader.getResource(""oidc.jks"").openStream(), ""password"".toCharArray());
        Certificate cert = keystore.getCertificate(""alice"");
        Assert.assertNotNull(cert);

        Assert.assertTrue(jwtConsumer.verifySignatureWith((X509Certificate)cert,
                                                          SignatureAlgorithm.RS256));
    }

    private static class CodeWebConnectionWrapper extends WebConnectionWrapper {

        private String code;

        CodeWebConnectionWrapper(WebClient webClient) throws IllegalArgumentException {
            super(webClient);
        }

        public WebResponse getResponse(WebRequest request) throws IOException {
            WebResponse response = super.getResponse(request);
            String location = response.getResponseHeaderValue(""Location"");
            if (location != null && location.contains(""code="")) {
                code = getSubstring(location, ""code"");
            }

            return response;
        }

        public String getCode() {
            return code;
        }

        private String getSubstring(String parentString, String substringName) {
            String foundString =
                parentString.substring(parentString.indexOf(substringName + ""="") + (substringName + ""="").length());
            int ampersandIndex = foundString.indexOf('&');
            if (ampersandIndex < 1) {
                ampersandIndex = foundString.length();
            }
            return foundString.substring(0, ampersandIndex);
        }
    }
}
"
