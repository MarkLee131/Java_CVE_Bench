Vul_Path,Vul_Src
"src/main/java/org/springframework/data/web/MapDataBinder.java:[66,72]:MapDataBinder","	public MapDataBinder(Class<?> type, ConversionService conversionService) {

		super(new HashMap<String, Object>());

		this.type = type;
		this.conversionService = conversionService;
	}
"
"src/main/java/org/springframework/data/web/MapDataBinder.java:[116,125]:MapPropertyAccessor","		public MapPropertyAccessor(Class<?> type, Map<String, Object> map, ConversionService conversionService) {

			Assert.notNull(type, ""Type must not be null!"");
			Assert.notNull(map, ""Map must not be null!"");
			Assert.notNull(conversionService, ""ConversionService must not be null!"");

			this.type = type;
			this.map = map;
			this.conversionService = conversionService;
		}
"
"src/main/java/org/springframework/data/web/MapDataBinder.java:[173,203]:setPropertyValue","		public void setPropertyValue(String propertyName, Object value) throws BeansException {

			if (!isWritableProperty(propertyName)) {
				throw new NotWritablePropertyException(type, propertyName);
			}

			StandardEvaluationContext context = new StandardEvaluationContext();
			context.addPropertyAccessor(new PropertyTraversingMapAccessor(type, new DefaultConversionService()));
			context.setTypeConverter(new StandardTypeConverter(conversionService));
			context.setRootObject(map);

			Expression expression = PARSER.parseExpression(propertyName);

			PropertyPath leafProperty = getPropertyPath(propertyName).getLeafProperty();
			TypeInformation<?> owningType = leafProperty.getOwningType();
			TypeInformation<?> propertyType = leafProperty.getTypeInformation();

			propertyType = propertyName.endsWith(""]"") ? propertyType.getActualType() : propertyType;

			if (conversionRequired(value, propertyType.getType())) {

				PropertyDescriptor descriptor = BeanUtils.getPropertyDescriptor(owningType.getType(),
						leafProperty.getSegment());
				MethodParameter methodParameter = new MethodParameter(descriptor.getReadMethod(), -1);
				TypeDescriptor typeDescriptor = TypeDescriptor.nested(methodParameter, 0);

				value = conversionService.convert(value, TypeDescriptor.forObject(value), typeDescriptor);
			}

			expression.setValue(context, value);
		}
"
