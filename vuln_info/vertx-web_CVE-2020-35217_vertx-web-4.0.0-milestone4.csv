Vul_Path,Vul_Src
"vertx-web/src/main/java/io/vertx/ext/web/handler/CSRFHandler.java:[21,102]:CSRFHandler","public interface CSRFHandler extends Handler<RoutingContext> {

  String ERROR_MESSAGE = ""Invalid or missing csrf token"";

  String DEFAULT_COOKIE_NAME = ""XSRF-TOKEN"";

  String DEFAULT_COOKIE_PATH = ""/"";

  String DEFAULT_HEADER_NAME = ""X-XSRF-TOKEN"";

  String DEFAULT_RESPONSE_BODY = null;

  /**
   * Instantiate a new CSRFHandlerImpl with a secret
   * <p>
   * <pre>
   * CSRFHandler.create(""s3cr37"")
   * </pre>
   *
   * @param secret server secret to sign the token.
   */
  static CSRFHandler create(Vertx vertx, String secret) {
    return new CSRFHandlerImpl(vertx, secret);
  }

  /**
   * Set the cookie name. By default XSRF-TOKEN is used as it is the expected name by AngularJS however other frameworks
   * might use other names.
   *
   * @param name a new name for the cookie.
   * @return fluent
   */
  @Fluent
  CSRFHandler setCookieName(String name);

  /**
   * Set the cookie path. By default / is used.
   *
   * @param path a new path for the cookie.
   * @return fluent
   */
  @Fluent
  CSRFHandler setCookiePath(String path);

  /**
   * Set the header name. By default X-XSRF-TOKEN is used as it is the expected name by AngularJS however other
   * frameworks might use other names.
   *
   * @param name a new name for the header.
   * @return fluent
   */
  @Fluent
  CSRFHandler setHeaderName(String name);

  /**
   * Should the handler give warning messages if this handler is used in other than https protocols?
   *
   * @param nag true to nag
   * @return fluent
   */
  @Fluent
  CSRFHandler setNagHttps(boolean nag);

  /**
   * Set the body returned by the handler when the XSRF token is missing or invalid.
   *
   * @param responseBody the body of the response. If null, no response body will be returned.
   * @return fluent
   */
  @Fluent
  CSRFHandler setResponseBody(String responseBody);


  /**
   * Set the timeout for tokens generated by the handler, by default it uses the default from the session handler.
   *
   * @param timeout token timeout
   * @return fluent
   */
  @Fluent
  CSRFHandler setTimeout(long timeout);
}
"
"vertx-web/src/main/java/io/vertx/ext/web/handler/CSRFHandler.java:[91,91]:setResponseBody","  CSRFHandler setResponseBody(String responseBody);
"
"vertx-web/src/main/java/io/vertx/ext/web/handler/CSRFHandler.java:[23,23]:ERROR_MESSAGE","  String ERROR_MESSAGE = ""Invalid or missing csrf token"";
"
"vertx-web/src/main/java/io/vertx/ext/web/handler/CSRFHandler.java:[31,31]:DEFAULT_RESPONSE_BODY","  String DEFAULT_RESPONSE_BODY = null;
"
